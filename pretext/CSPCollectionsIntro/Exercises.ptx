<exercises xml:id="csp-collections-intro_chapter-exercises">
  <title>Chapter Exercises</title>
  <exercise label="cspcollectionsintro_exercises1" numbered="yes" indentation="hide" language="python">
    <statement>
      <p>The following program segment should iterate through the list <c>terms</c> and then add each item to the list <c>vocab</c>
        if it is not already in <c>vocab</c>. If the word is already in <c>vocab</c>, then the program should add 1 to the
        variable <c>duplicates</c>.</p>
      <p>Arrange and indent the blocks correctly. You will not use them all.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>terms = ["accent", "vertigo",</cline>
        <cline> "libra", "illusion"]</cline>
        <cline>vocab = ["hereditary", "illusion",</cline>
        <cline> "vertigo", "velocity", "fallacy"]</cline>
        <cline>duplicates = 0</cline>
      </block>
      <block order="5">
        <cline>for word in terms:</cline>
      </block>
      <block order="4">
        <cline> if word not in vocab:</cline>
      </block>
      <block order="3" correct="no">
        <cline> if word not in terms: </cline>
      </block>
      <block order="8">
        <cline> vocab.append(word)</cline>
      </block>
      <block order="2" correct="no">
        <cline> word.append(vocab) </cline>
      </block>
      <block order="6">
        <cline> elif word in vocab:</cline>
      </block>
      <block order="1">
        <cline> duplicates = duplicates + 1</cline>
      </block>
      <block order="9" correct="no">
        <cline> duplicates + 1 </cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cspcollectionsintro_exercises2">
    <statement>
      <p>Write code to change the first item to <q>February</q>, to add <q>April</q> between
        <q>March</q> and <q>May</q>, and to remove <q>August</q>.</p>

    </statement>
    <program xml:id="cspcollectionsintro_exercises2_editor" interactive="activecode" language="python">
      <input>
        months = ["asdf", "March", "May", "June", "August"] #do not change

        # your code here

        print(months)
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(months, ["February", "March", "April", "May", "June"], "Testing that you have the right list")
                self.assertEqual(self.getEditorText().split("\n")[0], 'months = ["asdf", "March", "May", "June", "August"] #do not change', "Testing that you did not change the first line")
                self.assertNotRegex("".join(self.getEditorText().split("\n")[1:]), r"\[.*\".*\]", "Testing that you did not hard code the answer.")

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="cspcollectionsintro_exercises3">
    <statement>
      <p>Write code for the function <c>getRange</c>. It should take a list of numbers and return the range (the maximum value
        minus the minimum value). If we have the list [10, 8, 13, 20, 15], the range would be calculated as 20 - 8 and
        would be 12.</p>
      <p>Hint: First just worry about finding the maximum and minimum values. Once that is working, getting the range
        will be easy.</p>
      <p>Feel free to comment out some of the tests or add your own while you work on your code.</p>
      <p>Use codelens and print statements for debugging!</p>

    </statement>
    <program xml:id="cspcollectionsintro_exercises3_editor" interactive="activecode" language="python">
      <input>
        def getRange(numbers):
            # your code here
            # return the range

        print( "Should be 12:", getRange([10, 8, 13, 20, 15]) )
        print( "Should be 11:", getRange([6, -5, 4, 0]) )
        print( "Should be 2:", getRange([-2, -1, -2, -3]) )
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(getRange([10, 8, 13, 20, 15]), 12, 'Testing [10, 8, 13, 20, 15]')
                self.assertEqual(getRange([6, -5, 4, 0]), 11, 'Testing [6, -5, 4, 0]')
                self.assertEqual(getRange([-2, -1, -2, -3]), 2, 'Testing [-2, -1, -2, -3]')

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="cspcollectionsintro_exercises4">
    <statement>
      <p>Write code for the function <c>freezeDays</c>. It should take a list of temperatures <c>temps</c> (in degrees F) and return
        the number of days that were below 32 degrees.</p>
      <p>Hint: You may want to start by printing out each temperature and a <q>freeze</q> or <q>no</q>
        message to make sure you can identify the right temperatures. Then worry about counting how many there were.</p>
      <p>Feel free to comment out some of the tests or add your own while you work on your code.</p>

    </statement>
    <program xml:id="cspcollectionsintro_exercises4_editor" interactive="activecode" language="python">
      <input>
        def freezeDays(temps):
            # your code here
            # return the final value

        print( "Should be 3:", freezeDays([42, 31, 30, 33, 27, 32]) )
        print( "Should be 2:", freezeDays([18, 50, 72, 31, 60]) )
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(freezeDays([42, 31, 30, 33, 27, 32]), 3, 'Testing [42, 31, 30, 33, 27, 32]')
                self.assertEqual(freezeDays([18, 50, 72, 31, 60]), 2, 'Testing [18, 50, 72, 31, 60]')

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="cspcollectionsintro_exercises5">
    <statement>
      <p>Write code for the function <c>getGPA</c>. It should figure out the GPA for a list of <c>grades</c> that looks like
        [<q>A</q>, <q>A</q>, <q>C</q>].</p>
      <p>To calculate the GPA, you need to add up the values of all the grades. An A is 4, a B is 3, a C is 2, a D is 1,
        and an F is 0. Then divide by the number of grades in the list.</p>
      <p>Hint: Work on part of the problem at a time. First write some if logic that just prints the correct value for
        each grade (4, 4, 2 for [<q>A</q>, <q>A</q>, <q>C</q>]). Then worry about getting the total
        of them. Once that is working, worry about dividing by the number of items.</p>
      <p>Feel free to comment out some of the tests or add your own while you work on your code.</p>

    </statement>
    <program xml:id="cspcollectionsintro_exercises5_editor" interactive="activecode" language="python">
      <input>
        def getGPA(grades):
            # your code here
            # return the final value

        print( "Should be 3.75:", getGPA(["A", "A", "A", "B"]) )
        print( "Should be ~2.667:", getGPA(["B", "D", "A"]) )
        print( "Should be 2.00:", getGPA(["F", "D", "C", "B", "A"]) )
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertAlmostEqual(getGPA(["A", "A", "A", "B"]), 3.75, 2, 'Testing ["A", "A", "A", "B"]')
                self.assertAlmostEqual(getGPA(["B", "D", "A"]), 2.67, 1, 'Testing ["B", "D", "A"]')
                self.assertAlmostEqual(getGPA(["F", "D", "C", "B", "A"]), 2.0, 1, 'Testing ["F", "D", "C", "B", "A"]')

        myTests().main()
      </tests>
    </program>
  </exercise>

</exercises>