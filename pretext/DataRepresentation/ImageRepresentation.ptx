<section xml:id="data-representation_representing-images">
  <title>Representing Images</title>
  <p>Images can be represented in multiple ways - the most common being as a grid of little squares called <term>pixels</term>.
    In a very simple image that was only black and white, we could think of each pixel as being represented by a 0
    (black) or 1 (white). Thus this image:</p>
  <image source="DataRepresentation/Images/face.png" width="80%%" alt="A face" />
  <p>Could be stored as a binary string of 36 bits: 111111101101111111101101100001111111. To successfully draw the image
    from that pattern, we would have to know to interpret those series of binary digits as 6 rows of 6 pixels (and not
    say 4 rows of 9 pixels), so real image file formats often include extra information like the dimension of the image.</p>
  <p>In images, we often want to represent shades of gray or colors. To do so, each pixel can be assigned more than one
    bit. If each pixel is given a value consisting of 2 bits we can have 4 colors:</p>
  <p>
    <ul>
      <li>
        <p>00 black</p>
      </li>
      <li>
        <p>01 dark gray</p>
      </li>
      <li>
        <p>10 light gray</p>
      </li>
      <li>
        <p>11 white</p>
      </li>
    </ul>
  </p>
  <p>Using that scheme, we could make a shaded circle like this:</p>
  <image source="DataRepresentation/Images/circle.png" width="80%%" alt="2-bit grayscale circle" />
  <p>Representing that image takes 72 bits - a 6x6 grid of pixels each of which requires 2 bits. Once again, to draw the
    image from the bits we would need to know the dimensions of the image; but now, we also would need to specify the
    number of bits used for each pixel. Those 72 bits could represent a 3x6 image where each pixel is represented with 4
    bits (with 4 bits we could represent <m>2^4 = 16</m> different shades of gray).</p>
  <important>
    <p>
      <em>A pattern of bits only has the meaning we assign to it.</em>
    </p>
    <p>32 bits could represent a 4x8 image of 1-bit pixels, a 4x4 image of 2-bit pixels, a sequence of 4 ASCII letters,
      a really large binary number, or nearly anything else.</p>
  </important>
  <p>What about colors? Remember, bits only have the meaning we assign to them. We could interpret the 2 bits per pixel
    to mean:</p>
  <p>
    <ul>
      <li>
        <p>00 red</p>
      </li>
      <li>
        <p>01 orange</p>
      </li>
      <li>
        <p>10 yellow</p>
      </li>
      <li>
        <p>11 white</p>
      </li>
    </ul>
  </p>
  <p>And end up with this image:</p>
  <image source="DataRepresentation/Images/circlecolor.png" width="80%%" alt="2-bit color circle" />
  <p>If we want more than 4 colors, we just need more than 2 bits. With 8 bits per pixel, we can represent <m>2^8 = 256</m>
    different colors or shades of gray. This is sufficient for a black and white photograph but does not allow for
    subtle shades of color in a photograph. For full-color images, 24 bits are usually used per pixel, allowing for <m>2^{24}
    = 16,777,216</m> different colors.</p>
  <p>Real images, of course, use a much greater number of pixels than we have seen here. For example, a 12-megapixel
    camera takes images that measure about 4000x3000 pixels. If each of those pixels is stored as a 24-bit value, that
    image would consist of 4000 x 3000 x 24 = <term>288,000,000 bits of information</term>! That is 36,000,000 bytes or
    approximately 34.3 MiB. However, if you were to look at an image file produced by this camera, you would find it to
    be much smaller than 34 MiB even though the file stored extra information beyond the contents of each pixel (the
    dimensions of the image, how many bits per pixel, etc<ellipsis/>). This is because the image has been compressed - most
    common image formats (gif, jpeg, png) include some form of compression to reduce the space needed to store their
    information<ellipsis/> a topic we will learn more about later.</p>

  <exercise label="datarepresentation_imagerepresentation1">
    <statement>
      <p>How many bits would a 10x20 image with 8 different possible colors per pixel require? (Hint: how many bits are
        required to represent 8 different colors) <var />
      </p>
    </statement>
    <setup>
      <var>
        <condition number="[600, 600]">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*[\D]+\s*$">
          <feedback>
            <p>The answer should be just numeric digits</p>
          </feedback>
        </condition>
        <condition string="^\s*.{1,2}\s*$">
          <feedback>
            <p>Not enough digits</p>
          </feedback>
        </condition>
        <condition string="^\s*.{4,}\s*$">
          <feedback>
            <p>Too many digits</p>
          </feedback>
        </condition>
        <condition string="^\s*x\s*$">
          <feedback>
            <p>(length x width) x bits per pixel</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>

