<exercises xml:id="csp-repeat-images_chapter-exercises">
  <title>Chapter Exercises</title>

  <exercise label="csprepeatimages_exercises1">
    <statement>
      <p>Fix the indention below to correctly set the red to the green, the green to the blue, and the blue to the red.</p>
      <p>Hint: If your program runs out of time while it is running, it is probably because you are redrawing the window
        as you change each pixel. You should only draw the window one time!</p>

    </statement>
    <program xml:id="csprepeatimages_exercises1_editor" interactive="activecode" language="python">
      <input>
        # STEP 1: USE THE IMAGE LIBRARY
        from image import *

        # STEP 2: PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg")
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # STEP 3: LOOP THROUGH THE PIXELS
        pixels = img.getPixels()
        for p in pixels:

        # STEP 4: GET THE DATA
        r = p.getRed()
        g = p.getGreen()
        b = p.getBlue()

        # STEP 5: MODIFY THE COLOR
        p.setRed(g)
        p.setGreen(b)
        p.setBlue(r)

        # STEP 6: UPDATE THE IMAGE
        img.updatePixel(p)

      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 4)
                self.assertEqual(testPixel.getRed(), 111, "Testing you set right red value for a particular pixel")
                self.assertEqual(testPixel.getGreen(), 180, "Testing you set right green value for a particular pixel")
                self.assertEqual(testPixel.getBlue(), 71, "Testing you set right blue value for a particular pixel")

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="csprepeatimages_exercises2">
    <statement>
      <p>Fix 4 syntax errors in the code below so that it correctly sets the green in all pixels to 0.</p>

    </statement>
    <program xml:id="csprepeatimages_exercises2_editor" interactive="activecode" language="python">
      <input>
        from image import

        # PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg)
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # LOOP THROUGH THE PIXELS
        pixelList = img.getPixels()
        for p in pixelList:

            # SET THE GREEN TO 0
            p.setGreen

            # UPDATE THE IMAGE
            img.updatePixel()
      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 4)
                self.assertEqual(testPixel.getGreen(), 0, "Testing you set right green value for a particular pixel")

        myTests().main()
        </tests>
    </program>
  </exercise>

  <exercise label="csprepeatimages_exercises3">
    <statement>
      <p>Fill in the missing code on lines 9, 12, and 18 below so that the blue value of each pixel ends up 1/2 of what
        it used to be.</p>

    </statement>
    <program xml:id="csprepeatimages_exercises3_editor" interactive="activecode" language="python">
      <input>
        # STEP 1: USE THE IMAGE LIBRARY
        from image import *

        # STEP 2: PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg")
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # STEP 3: LOOP THROUGH THE PIXELS
        pixels = img.getPixels()
        for p

            # STEP 4: GET THE DATA
            b = p.

            # STEP 5: MODIFY THE COLOR
            p.setBlue(b * 0.5)

            # STEP 6: UPDATE THE IMAGE
            img.
      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 4)
                self.assertEqual(testPixel.getBlue(), 90, "Testing you set right blue value for a particular pixel")

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="csprepeatimages_exercises4">
    <statement>
      <p>This program should make a black-and-white image by setting the 
        red and green values for each pixel to be the same as
        the pixel<rsq/>s blue value. Write the missing code:</p>

    </statement>
    <program xml:id="csprepeatimages_exercises4_editor" interactive="activecode" language="python">
      <input>
        # STEP 1: USE THE IMAGE LIBRARY
        from image import *

        # STEP 2: PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg")
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # STEP 3: LOOP THROUGH THE PIXELS
        pixels = img.getPixels()
        for p in pixels:

            # STEP 4: GET THE DATA


            # STEP 5: MODIFY THE COLOR


            # STEP 6: UPDATE THE IMAGE
            img.updatePixel(p)

      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 4)
                self.assertEqual(testPixel.getRed(), 180, "Testing you set right red value for a particular pixel")
                self.assertEqual(testPixel.getGreen(), 180, "Testing you set right green value for a particular pixel")
                self.assertEqual(testPixel.getBlue(), 180, "Testing you set right blue value for a particular pixel")

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="csprepeatimages_exercises5">
    <statement>
      <p>Write code to set the red value of each pixel to 255. This should give the entire image a rosy tint.</p>
    </statement>
    <program xml:id="csprepeatimages_exercises5_editor" interactive="activecode" language="python">
      <input>
        # STEP 1: USE THE IMAGE LIBRARY
        from image import *

        # STEP 2: PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg")
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # STEP 3: LOOP THROUGH THE PIXELS


            # STEP 4: GET THE DATA


            # STEP 5: MODIFY THE COLOR


            # STEP 6: UPDATE THE IMAGE

      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 40)
                testPixel2 = img.getPixel(3, 42)
                self.assertEqual(testPixel.getRed(), 255, "Testing you set right red value for a particular pixel")
                self.assertEqual(testPixel2.getRed(), 255, "Testing you set right red value for a particular pixel")

        myTests().main()
      </tests>
    </program>
  </exercise>


  <exercise label="csprepeatimages_exercises6">
    <statement>
      <p>Write code to multiply the r, g, and b color of each pixel by 0.8. In other words, for each color channel (r, g, b), get its current value, multiply that by 0.8, and use the answer as the new value for the color. This should make the image darker.</p>
    </statement>
    <program xml:id="csprepeatimages_exercises6_editor" interactive="activecode" language="python">
      <input>
        # STEP 1: USE THE IMAGE LIBRARY
        from image import *

        # STEP 2: PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg")
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # STEP 3: LOOP THROUGH THE PIXELS


            # STEP 4: GET THE DATA


            # STEP 5: MODIFY THE COLOR


            # STEP 6: UPDATE THE IMAGE


      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 40)
                self.assertEqual(testPixel.getRed(), 71, "Testing you set right red value for a particular pixel")
                self.assertEqual(testPixel.getGreen(), 103, "Testing you set right green value for a particular pixel")
                self.assertEqual(testPixel.getBlue(), 158, "Testing you set right blue value for a particular pixel")

        myTests().main()
      </tests>
    </program>
  </exercise>
  
  <exercise label="csprepeatimages_exercises7">
    <statement>
      <p>Write code that for each pixel, adds the <c>y</c> value of its location to its red color.</p>
    </statement>
    <program xml:id="csprepeatimages_exercises7_editor" interactive="activecode" language="python">
      <input>
        # STEP 1: USE THE IMAGE LIBRARY
        from image import *

        # STEP 2: PICK THE IMAGE AND DISPLAY IT
        img = Image("mount_hood.jpg")
        win = ImageWin(img.getWidth(), img.getHeight())
        img.draw(win)
        img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

        # STEP 3: LOOP THROUGH THE PIXELS


            # STEP 4: GET THE DATA


            # STEP 5: MODIFY THE COLOR


            # STEP 6: UPDATE THE IMAGE

      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                testPixel = img.getPixel(3, 40)
                testPixel2 = img.getPixel(3, 42)
                self.assertEqual(testPixel.getRed(), 129, "Testing you set right red value for a particular pixel")
                self.assertEqual(testPixel2.getRed(), 132, "Testing you set right red value for a particular pixel")

        myTests().main()
      </tests>
    </program>
  </exercise>

  
</exercises>