<section xml:id="csp-repeat-images_a-pattern-for-image-processing">
  <title>A Pattern for Image Processing</title>
  <p>There is a fair amount of code involved in a program like this. But there is a pattern to the
    code we need to write. Learning to recognize the pattern makes it easier to write a new program
    - we can follow the steps of the pattern and only worry about modifying small parts of the basic
    recipe.</p>
  <p>A basic image processing pattern is shown in the program below. This program changes the colors
    around in crazy ways. It sets the red value to the original green, the green to the original
    blue, and the blue to the original red. Compare the results of running this program with the
    original goalkeeper image from the <xref ref="csp-image-library" text="title" />.</p>

  <program xml:id="csprepeatimages_pattern1" interactive="activecode" language="python">
    <input>
# STEP 1: USE THE IMAGE LIBRARY
from image import *

# STEP 2: PICK THE IMAGE
img = Image("goalkeeper.jpg")

# STEP 3: LOOP THROUGH THE PIXELS
pixels = img.getPixels()
for p in pixels:

    # STEP 4: GET THE DATA
    originalRed = p.getRed()
    originalGreen = p.getGreen()
    originalBlue = p.getBlue()

    # STEP 5: MODIFY THE COLOR
    p.setRed(originalGreen)
    p.setGreen(originalBlue)
    p.setBlue(originalRed)

    # STEP 6: UPDATE THE IMAGE WITH THE CHANGED PIXEL
    img.updatePixel(p)

# STEP 7: SHOW THE RESULT
win = ImageWin(img.getWidth(), img.getHeight())
img.draw(win)
  </input>
  </program>
  <p>The fundamental steps are:</p>
  <p>
    <ol>
      <li>
        <p><term>USE THE IMAGE LIBRARY.</term> We need to import the image library.</p>
      </li>
      <li>
        <p>
          <term> PICK THE IMAGE.</term> We pick a particular image from our library by specifying
          its name as a string (with quotation marks) inside the parentheses.</p>

      </li>
      <li>
        <p><term>LOOP THROUGH THE PIXELS.</term> This example gets <em>every</em> pixel in the image
          and loops through them all one at a time.</p>

      </li>
      <li>
        <p><term>GET THE DATA.</term> You could always use the STEP 4 lines just as they are above,
          but you might be able to make it shorter if you don't need all the colors. If your program
          just needs to work with red, you don’t have to get the green and blue values.</p>

      </li>
      <li>
        <p><term>MODIFY THE COLOR.</term> This is the part that you will most often change. Here’s
          where you change the red, green, and/or blue. You don’t have to change all of them.</p>

      </li>
      <li>
        <p><term>UPDATE THE IMAGE.</term> This will update the image using the new colors of the
          pixel.</p>
      </li>
      <li>
        <p><term>SHOW THE RESULT.</term> This will draw the changed image in a window.</p>
      </li>
    </ol>
  </p>

  <p>Notice that steps 4-6 are indented in the code. That means they are part of the for loop on
    line 9. They get repeated for each of the pixels in the image. Step 7 is not indented. It
    happens just once after all the pixels are processed in the for loop.</p>

  <p>Time to experiment with our pattern.</p>

  <exercise label="csprepeatimages_pattern2">
    <statement>

      <p>What happens if in step 5 you set all three colors to <c>originalGreen</c>?</p>

    </statement>
    <choices>

      <choice>
        <statement>
          <p>It turns totally green</p>
        </statement>
        <feedback>
          <p>Did you try it?</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>It becomes a black-and-white picture</p>
        </statement>
        <feedback>
          <p>Yes, anytime the red, green, and blue values are the same we get a shade of gray.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>It takes on a green cast</p>
        </statement>
        <feedback>
          <p>Did you try it?</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>All the green disappears</p>
        </statement>
        <feedback>
          <p>Did you try it?</p>
        </feedback>
      </choice>
    </choices>

  </exercise>

  <exercise label="csprepeatimages_pattern3">
    <statement>

      <p>Change lines 17-19 so that the new red value is 255 and blue and green are each 150. What
        happens?</p>

    </statement>
    <choices>

      <choice>
        <statement>
          <p>The goalkeeper looks pink</p>
        </statement>
        <feedback>
          <p>Did you try it?</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>It becomes solid red</p>
        </statement>
        <feedback>
          <p>Did you try it?</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The goalkeeper looks red</p>
        </statement>
        <feedback>
          <p>Did you try it?</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>It becomes solid pink</p>
        </statement>
        <feedback>
          <p>Yes - we are ignoring the original colors completely!</p>
        </feedback>
      </choice>
    </choices>

  </exercise>

  <exercise label="csprepeatimages_pattern4">
    <statement>

      <p>We know that the color values are each supposed to be 0-255. What happens if we use values
        outside of that range?</p>
      <p>Change lines 17-19 so that the new red value is 255 and blue and green are each 0. Run the
        program and observe the results. Then change the red value to 300 and the blue to -100. Run
        it again. What seems to happen?</p>

    </statement>
    <choices>

      <choice correct="yes">
        <statement>
          <p>Values above 255 are treated as 255 and values less than 0 are treated as 0.</p>
        </statement>
        <feedback>
          <p>Yes, if you use a value less than 0 it becomes 0. If you use a value over 255, it
            becomes 255.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Values outside of the range 0-255 are treated as 0.</p>
        </statement>
        <feedback>
          <p>That would mean 300 red would be treated as 0, which is "no red"<ellipsis /> still is
            lots of red visible.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Values outside of the range 0-255 are treated as 255.</p>
        </statement>
        <feedback>
          <p>That would mean -100 blue would be treated as 255<ellipsis /> but there is no blue in
            the image.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Values outside the range 0-255 "wrap around". Going past 255 takes you back to 0, so
            300 is the same as 300 - 255 = 45.</p>
        </statement>
        <feedback>
          <p>That does not seem to be the case. 300 red looks the same as 255 red.</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
</section>

