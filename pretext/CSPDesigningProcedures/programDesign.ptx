<section xml:id="csp-designing-procedures_program-design">
        <title>Program Design</title>
        <p>One of the secrets of solving large, complex problems is to do our best to turn them into
            a group of smaller problems. Then, we can try to solve these small problems and test our
            solutions one at a time.</p>
        
        
        <p xml:id="csp-designing-procedures_index-0">The process of breaking a large problem up into smaller sub-problems is known as
            <term>top-down design</term>. Start with the big problem and then use this process:</p>
        <p>1. Decide if you can solve the problem with a small number of lines of code (ideally
            ~10 or less). If so, great, solve the problem. (Or put on a list of problems you will
            solve when you are done breaking everything down.)</p>
        <p>2. If the problem is too complex to solve with a small amount of code, break it up
            into parts. Then repeat this process (starting from step 1) with each of the parts.</p>
        <p>As you identify parts of a task, think about what information you will need to give
            to the procedure responsible for that task so it can do its job. These will be the
            parameters for your procedure. In the case of a turtle graphics program,
            every procedure will need to know the name of the turtle it is supposed to use.
            We also may need parameters to specify things like a size or color.</p>
        <p>Along the way, look for places where you are writing basically the same code in
            multiple places. Those are places you can maybe use a procedure to do the common
            part of the work. You may have to use parameters to make the procedure flexible
            enough to work in multiple situations.</p>
        <p>Don&#8217;t worry about coming up with a perfect design on your first try. Sometimes you
            will think a problem is going to be easy and when you start working on it, realize
            it is much harder than you anticipated. In those cases you can stop and revise your
            design by breaking the complex procedure into smaller pieces.</p>
        <subsection xml:id="csp-designing-procedures_top-down-design-example">
            <title>Top-Down Design Example</title>
            <p>Say I want to draw a house using turtle graphics that looks like this:</p>
            <image source="CSPDesigningProcedures/Figures/turtlehouse.png" width="50%"/>
            <p>My design process might look like this:</p>
            <program language="none"><input>
<p>Can I <c>drawHouse</c> in ~10 lines of code? Pretty sure no. So let me break it down.
<raw format="html" xml:space="preserve">&amp;nbsp;</raw>
Well, I need to:</p><p><ul><li><p><c>drawWall</c> by making a rectangle</p></li><li><p><c>drawDoor</c> by making a smaller rectangle</p></li><li><p><c>drawWindow</c> make a square with cross in the middle. I'll need to do this twice.</p></li><li><p><c>drawRoof</c> which is a triangle</p></li></ul></p><p>OK, lets start with the <c>drawWall</c>... That seems pretty easy. I bet I can do that in
about 10 lines of code.
<raw format="html" xml:space="preserve">&amp;nbsp;</raw>
Moving on to the <c>drawDoor</c>. That seems easy too. And it is a rectangle, like the wall.
<raw format="html" xml:space="preserve">&amp;nbsp;</raw>
Maybe I should make a <c>drawRectangle</c> that both of these use. If I do that, it needs
to allow me to specify a <c>width</c> and <c>height</c> so I can make rectangles of different
sizes. <c>drawRectangle</c> does not sound too bad - I can make that in under 10 lines. And
if I do, the door and wall will be a snap.
<raw format="html" xml:space="preserve">&amp;nbsp;</raw>
OK, how about <c>drawWindow</c>. Well, it might be more than 10 lines of code. But I can
use the <c>drawRectangle</c> to make this easier. If I have it to use, I think this won't be
too bad. I can just draw four small squares to make a window.
<raw format="html" xml:space="preserve">&amp;nbsp;</raw>
<c>drawRoof</c> doesn't sound too bad.</p>
</input></program>
            <p>Now that I&#8217;ve broken everything down into manageable chunks, we are ready to start implementing&#8230;</p>
<exercise label="cspdesigningprocedures_programdesign1" numbered="yes" indentation="show" language="python"><statement>
            <p>Let&#8217;s make sure you understand the design listed above. Arrange the blocks to implementation
                the rough design.</p>
            <p>Make sure you list the procedures in a valid order. Anything that draws a rectangle needs
                to come after the low-level <c>rectangle</c> procedure. The highest-level procedure,
                <c>drawHouse</c> must come after all of the other procedures because it makes use of them.</p>
            <p>Don&#8217;t forget to indent the body of each procedure, even if it is not real code yet.</p>
</statement>
<blocks/></exercise>        </subsection>
    </section>

