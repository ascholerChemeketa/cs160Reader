<exercises xml:id="csp-decisions-images_chapter-exercises">
  <title>Chapter Exercises</title>
  <exercise label="cspdecisionsimages_exercises1" numbered="yes" indentation="hide" language="python">
    <statement>
      <p>The code below is supposed to change the white in the French flag to aqua (Aqua is made by mixing blue and
        green with no red). Arrange and indent the blocks to make a correct program. You will not use them all.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>from image import *</cline>
        <cline>img = Image("fr-flag.gif")</cline>
      </block>
      <block order="4">
        <cline>for p in img.getPixels():</cline>
      </block>
      <block order="3">
        <cline> r = p.getRed()</cline>
        <cline> g = p.getGreen()</cline>
        <cline> b = p.getBlue()</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline> if r &gt; 250 and g &gt; 250 and b &gt; 250:</cline>
        </choice>
        <choice>
          <cline> if r &lt; 250 and g &lt; 250 and b &lt; 250: </cline>
        </choice>
      </block>
      <block order="2">
        <cline> p.getRed(0)</cline>
        <cline> p.getGreen(250)</cline>
        <cline> p.getBlue(250)</cline>
      </block>
      <block order="8">
        <cline> img.updatePixel(p)</cline>
      </block>
      <block order="7">
        <cline>win = ImageWin(img.getWidth(),img.getHeight())</cline>
        <cline>img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  
  <exercise label="cspdecisionsimages_exercises2">
    <statement>
      <p>Complete the program below so it changes all the green pixels in the image to red.</p>
      <p>Hint: The green pixels are not pure green. They have almost as much red as they do green. A sample color
        value might be 111 red, 115 green, and 65 blue. However, the tan pixels also have a lot of green. A tan pixel 
        might have the colors: 177 red, 129 green, 53 blue. Notice that the tan one has a lot more red than the green pixels. 
        Make sure your recipe selects things that have a lot of green, but also do not have too much red.</p>
    </statement>
    <program xml:id="cspdecisionsimages_exercises2_editor" interactive="activecode" language="python">
      <input>
        from image import *

        # CREATE AN IMAGE FROM A FILE
        img = Image("logo.jpg")

        # LOOP THROUGH ALL PIXELS
        pixels = img.getPixels();
        for p in pixels:

            # GET PIXEL DATA
            r = p.getRed()
            g = p.getGreen()
            b = p.getBlue()

            # DECIDE IF GREENISH
            ???

                # MAKE RED
                p.setRed(255)
                p.setGreen(0)
                p.setBlue(0)
            
                # UPDATE IMAGE
                img.updatePixel(p)

        # SHOW THE CHANGED IMAGE
        win = ImageWin(img.getWidth(),img.getHeight())
        img.draw(win)
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(str(img.getPixel(100, 100)), '[255,0,0]', "Testing that green became red")
                self.assertEqual(str(img.getPixel(150, 40)), '[177,129,53]', "Testing that brown did not become red")

        myTests().main()
      </tests>
    </program>
  </exercise>

  <exercise label="cspdecisionsimages_exercises3">
    <statement>
      <p>We want to make the pixels in the right half of an image turn black. Pixels in the left
        half of the image should stay the same.</p>
      <p>You need to write code to decide if each pixel is on the right half and then, if so, make it black.
        The image is 300 pixels wide.
      </p>

    </statement>
    <program xml:id="cspdecisionsimages_exercises3_editor" interactive="activecode" language="python">
      <input>
        from image import *

        # CREATE AN IMAGE FROM A FILE
        img = Image("logo.jpg")

        # LOOP THROUGH ALL PIXELS
        pixels = img.getPixels();
        for p in pixels:

            # GET PIXEL DATA
            x = p.getX()

            # DECIDE IF ON RIGHT

                # MAKE BLACK (0,0,0)
            
                # UPDATE IMAGE
                img.updatePixel(p)


        # SHOW THE CHANGED IMAGE
        win = ImageWin(img.getWidth(),img.getHeight())
        img.draw(win)
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(str(img.getPixel(280, 10)), '[0,0,0]', "Testing that a pixel on the right is black.")
                self.assertEqual(str(img.getPixel(5, 260)), '[253,254,255]', "Testing that a pixel on the left is unchanged.")

        myTests().main()
      </tests>
    </program>
  </exercise>


  <datafile label="goalkeeper" filename="goalkeeper.jpg">
    <image source="CSP/Images/goalkeeper.jpg" />
  </datafile>

  <exercise label="cspdecisionsimages_exercises4">
    <statement>
      <p>Write the function <c>isYellow</c> that accepts red, green, and blue values as its parameters and returns <c>True</c> if
        both the green and red values are at least 40 more than the blue value. Otherwise, it should return <c>False</c>.</p>
      <p>Once you write the function, it will be used to turn the goalkeeper&#8217;s jersey from yellow to aqua by
        swapping the red and blue values.</p>
      <p>Hint: Start by writing a function that returns <c>True</c> always. That will let you run the program but will
        change every pixel. Then add a condition to say <c>True</c> or <c>False</c> based on the <c>r, g, b</c> values passed in.</p>
    </statement>
    <program xml:id="cspdecisionsimages_exercises4_editor" interactive="activecode" language="python">
      <input>
        from image import *

        def isYellow(r, g, b):
            # Write isYellow here!!!

        # Main part of program
        # CREATE AN IMAGE FROM A FILE
        img = Image("goalkeeper.jpg")

        # LOOP THROUGH ALL PIXELS
        pixels = img.getPixels();
        for p in pixels:

            # GET PIXEL DATA
            r = p.getRed()
            g = p.getGreen()
            b = p.getBlue()

            # IS IT YELLOW?
            if isYellow(r, g, b):

                # CHANGE THE COLOR TO SWAP RED AND BLUE
                p.setRed(b)
                p.setBlue(r)

                # UPDATE THE IMAGE
                img.updatePixel(p)

        # SHOW THE CHANGED IMAGE
        win = ImageWin(img.getWidth(),img.getHeight())
        img.draw(win)
    </input>
    <tests>

      from unittest.gui import TestCaseGui

      class myTests(TestCaseGui):
          def testOne(self):
              self.assertEqual(isYellow(80, 70, 29), True, "Testing if 80,70,29 is considered Yellow")
              self.assertEqual(isYellow(70, 80, 29), True, "Testing if 70,80,29 is considered Yellow")
              self.assertEqual(isYellow(60, 70, 29), False, "Testing if 60,70,29 is considered NOT Yellow")
              self.assertEqual(isYellow(70, 60, 29), False, "Testing if 70,60,29 is considered NOT Yellow")
      myTests().main()
      </tests>
    </program>
  </exercise>


</exercises>