<section xml:id="csp-decisions-images_using-decisions-with-images">
  <title>Using Decisions with Images</title>
  <p>We can create image effects by conditionally executing code on pixels that meet particular criteria. In the code
    below, we will try to change the French flag (the image on top), into the flag of Chad (bottom).</p>

  <hidden>
    <datafile label="fr-flag" filename="fr-flag.gif">
      <image source="CSP/Images/fr-flag.gif" />
    </datafile>
    <datafile label="be-flag" filename="be-flag.gif">
      <image source="CSP/Images/fr-flag.gif" />
    </datafile>
    <datafile label="cd-flag" filename="cd-flag.gif">
      <image source="CSP/Images/cd-flag.gif" />
    </datafile>
  </hidden>

  <image source="CSP/Images/fr-flag.gif" width="20%" />
  <image source="CSP/Images/cd-flag.gif" width="20%" />

  <p>To do this, we need to change just the white pixels in the image and make them yellow. This means we need a way to
    answer the question <q>Is this pixel white?</q>. A pure white pixel has red, green, and blue values all of
    255. A not-quite-pure white may not have 255 for each of the three values, but they will all be high, and they will
    all be very similar to each other. In comparison, a blue pixel is going to have a high blue value and low red and
    green (potentially 0 for a <q>perfect</q> blue). A red pixel will have a high red value and low blue and
    green ones.</p>
  <p>So in general, to find a white pixel we could look for something where <c>red &gt; 250 and green &gt; 250 and blue &gt; 250</c>. <c>250</c> is not always going to be
    the right number to use, it just represents a value that is pretty close to maxed out without counting on all three
    colors being exactly 255.</p>
  <p>All of the white pixels need to be changed to yellow. A yellow will always have a relatively high green and red
    value and a low blue value. A good value for the yellow in the flag is 254 red, 242 green, and 0 blue.</p>
  <p>Here is a program that does that. After running it, try removing the line that does the `updatePixel` - 
    if you run that version you should get the unmodified French flag.</p>

  <program xml:id="cspdecisionsimages_decimages1" interactive="activecode" language="python">
    <input>
from image import *

img = Image("fr-flag.gif")

pixels = img.getPixels()
for p in pixels:

    # GET CURRENT COLOR VALUES
    r = p.getRed()
    g = p.getGreen()
    b = p.getBlue()

    # IS IT WHITE?
    if r &gt; 250 and g &gt; 250 and b &gt; 250:
        # MAKE IT YELLOW
        p.setRed(254)
        p.setGreen(242)
        p.setBlue(0)
        # CHANGE THE IMAGE
        img.updatePixel(p)


# SHOW THE CHANGED IMAGE
win = ImageWin(img.getWidth(),img.getHeight())
img.draw(win)
      </input>
  </program>

  <p>The Belgian flag is very similar to the Chad flag. See if you can turn the Chad flag into the Belgian one by
    turning the blue pixels into black ones. Hints: blue pixels are not perfect blue. An approximate color value is
    (red = 0, green = 100, blue = 180), but you should not count on pixels having exactly those values - come up with a
    recipe using <c>&gt;</c> and <c>&lt;</c> that selects the blue pixels but not the yellow or red ones. 
    Black pixels have r, g, and b values of 0.</p>

  <image source="CSP/Images/be-flag.gif" width="20%" />

  <program xml:id="cspdecisionsimages_decimages2" interactive="activecode" language="python">
    <input>
from image import *

img = Image("cd-flag.gif")

# LOOP THROUGH ALL PIXELS
pixels = img.getPixels()
for p in pixels:
    # GET CURRENT COLOR VALUES
    r = p.getRed()
    g = p.getGreen()
    b = p.getBlue()

    # TEST THE PIXEL 

        #IF BLUE MAKE BLACK AND UPDATE

# SHOW THE CHANGED IMAGE
win = ImageWin(img.getWidth(),img.getHeight())
img.draw(win)
      </input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        p = img.getPixel(5, 5)
        totalColor = p.getRed() + p.getBlue() + p.getGreen()
        self.assertEqual(totalColor, 0, "Testing that blue pixels became black")
        p2 = img.getPixel(50, 5)
        totalColor = p2.getRed() + p2.getBlue() + p2.getGreen()
        self.assertNotEqual(totalColor, 0, "Testing that yellow pixels did not become black")
        
myTests().main()
        </tests>
  </program>

  <exercise label="cspdecisionsimages_decimages3">
    <statement>

      <p>Which recipe is reasonable for checking for <q>is it a blue pixel</q> for the flag of Chad?</p>

    </statement>
    <choices>

      <choice correct="yes">
        <statement>
          <p>red &lt; 20 and green &gt; 80 and blue &gt; 150</p>
        </statement>
        <feedback>
          <p>Correct, that works to select the blue but not the red or yellow.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>red &lt; 20 and green &lt; 20 and blue &gt; 200</p>
        </statement>
        <feedback>
          <p>The blue in the flag has a higher green value than 20</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>red &lt; 20 and green &gt; 20 and blue &gt; 200</p>
        </statement>
        <feedback>
          <p>The blue in the flag isn't actually that blue</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>red &lt; 20 and green &lt; 80 and blue &gt; 150</p>
        </statement>
        <feedback>
          <p>The blue in the flag has a higher green value than 80</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
</section>

