<section xml:id="csp-decisions-images_combining-pictures">
  <title>Combining Pictures</title>
  <p>A common use of color replacement technology is &#8220;green scren&#8221; background replacement. An actor performs
    in front of a green wall or a Zoom meeting participant sits in front of a green sheet. A computer algorithm them
    looks for green pixels and replaces them with pixels from some other image. The result is that the person looks like
    they are in some other location. (Unless of course, they have a green shirt on, in which case it will look like their
    disembodied head is floating in the background.)</p>

  <p>We are going to put the woman shown below into the beach scene:</p>

  
  <hidden>
    <datafile label="beach" filename="beach.jpg">
      <image source="CSP/Images/beach.jpg" />
    </datafile>
  </hidden>

  <sidebyside width="20%" margins="25%">
    <image source="CSP/Images/green_screen.jpg" />
    <image source="CSP/Images/beach.jpg" />
  </sidebyside>

  <p>First up, we need to have an <c>isGreen</c> function to identify which pixels are part of the green background. It will be
    very similar to the <c>isRed</c> from the last page, only we want to verify that the green is greater than the red or
    blue values.</p>

  <exercise label="cspdecisionsimages_combineimages1">
    <statement>
      <p>Write code to return <c>True</c> if the green value is 20 or more greater than both the red and blue values.
        Otherwise, return <c>False</c></p>

    </statement>
    <program xml:id="cspdecisionsimages_combineimages1_editor" interactive="activecode" language="python">
      <input>
        from image import *

        def isGreen(r, g, b):
            #Write your logic here

        # Main part of program
        # These three should be considered green
        print( isGreen(59, 165, 119) )
        print( isGreen(47, 142, 102) )
        print( isGreen(60, 220, 125) )
        # These should not be considered green
        print( isGreen(200, 200, 200) ) # gray
        print( isGreen(180, 180, 0) )   # dark yellow
        print( isGreen(200, 0, 200) )   # aqua
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(isGreen(59, 165, 144), True, "Testing 59, 165, 144.")
                self.assertEqual(isGreen(47, 142, 102), True, "Testing 47, 142, 102.")
                self.assertEqual(isGreen(190, 220, 125), True, "Testing 190, 220, 125.")
                self.assertEqual(isGreen(200, 200, 200), False, "Testing 200, 200, 200.")
                self.assertEqual(isGreen(180, 180, 0), False, "Testing 180, 180, 0.")
                self.assertEqual(isGreen(200, 0, 200), False, "Testing 200, 0, 200.")

        myTests().main()
      </tests>
    </program>
  </exercise>
  <p>Once you get that working, you can bopy and paste it into the program below. It will load the two pictures, with
    the woman stored as <c>img1</c> and the beach as <c>img2</c>. It the goes through each pixel in <c>img1</c> and asks <c>isGreen</c>
    about it. If so, that pixel gets replaced with the pixel from <c>img2</c> that is at the same x, y.</p>

  <program xml:id="cspdecisionsimages_combineimages2" interactive="activecode" language="python">
    <input>
from image import *

# PUT YOUR isGreen CODE HERE

# Main program
# CREATE THE IMAGES
img1 = Image("green_screen.jpg")
img2 = Image("beach.jpg")

# LOOP THROUGH ALL THE PIXELS IN IMG1
pixels = img1.getPixels()
for p1 in pixels:
    x = p1.getX()
    y = p1.getY()
    r = p1.getRed()
    g = p1.getGreen()
    b = p1.getBlue()

    # CHECK IF THE PIXEL IS GREEN
    if isGreen(r, g, b):

        # GET THE CORESPONDING PIXEL FROM img2, CALL IT p2
        p2 = img2.getPixel(x, y)
        # USE THAT INSTEAD OF p1 IN img1
        img1.setPixel(x, y, p2)

# SHOW THE CHANGED IMAGE
win = ImageWin(img1.getWidth(), img1.getHeight())
img1.draw(win)
  </input>
  </program>

  <exercise label="cspdecisionsimages_combineimages3">
    <statement>

      <p>Which of these recipes will result in just the faces being in color and the outer parts of the image being in
        black and white?</p>

    </statement>
    <choices>

      <choice>
        <statement>
          <p>y &lt; 110 and y &gt; 10 and x &gt; 70 and x &lt; 200</p>
        </statement>
        <feedback>
          <p>That will select pixels in the middle of the screen (y from 10-110 and x from 70-200). We want the
            opposite.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>(y &gt; 110 or y &lt; 10) and (x &lt; 70 or x &gt; 200)</p>
        </statement>
        <feedback>
          <p>That requires both the x and y to be outside the center area. It will make a "cross" of color.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>y &gt; 110 and y &lt; 10 and x &lt; 70 and x &gt; 200</p>
        </statement>
        <feedback>
          <p>How can the y be &gt; 110 and also be &lt; 10? There will be no pixels that meet the criteria to be
            changed.</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>y &gt; 110 or y &lt; 10 or x &lt; 70 or x &gt; 200</p>
        </statement>
        <feedback>
          <p>Correct</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
</section>

