<section xml:id="csp-decisions-images_posterizing">
  <title>Posterizing</title>
  <p>As one last example of selectively modifying the colors in an image, we are going to <term>
    posterize</term> an image. <term>Posterizing</term> is the process of changing an image so it
    only uses a small number of colors. (Old posters had to be printed with a small number of colors
    - the technology didnâ€™t allow for complex blending of colors).</p>
  <p>This time, instead of making a function to answer a question like <q>Is this green?</q>, we
    need to make a function that will force a color value to become one of a few specific options.</p>

  <exercise label="cspdecisionsimages_posterize1">
    <statement>
      <p>Write code for <c>posterize</c> to return 0 if <c>colorValue</c> is less than 50, 125 if it is 50-124, and 255
        otherwise.</p>

    </statement>
    <program xml:id="cspdecisionsimages_posterize1_editor" interactive="activecode"
      language="python">
      <input>
        def posterize(colorValue):
            #Write your logic here

        # Main part of program
        print( posterize(20) )
        print( posterize(49) )
        print( posterize(50) )
        print( posterize(124) )
        print( posterize(200) )
      </input>
      <tests>

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(posterize(20), 0, "posterize(20)")
                self.assertEqual(posterize(49), 0, "posterize(49)")
                self.assertEqual(posterize(50), 125, "posterize(50)")
                self.assertEqual(posterize(124), 125, "posterize(124)")
                self.assertEqual(posterize(200), 255, "posterize(200)")

        myTests().main()
      </tests>
    </program>
  </exercise>
  <p>Now that you have that function, add it to this program to see it in action:</p>

  <program xml:id="cspdecisionsimages_posterize2" interactive="activecode" language="python">
    <input>
from image import *

# ADD YOUR FUNCTION HERE

# CREATE AN IMAGE FROM A FILE
img = Image("mount_hood.jpg")
win = ImageWin(img.getWidth(),img.getHeight())
img.draw(win)
img.setDelay(1, 400)   #SPEEDS UP THE DRAWING

# LOOP THROUGH THE PIXELS
pixels = img.getPixels();
for p in pixels:

    # GET THE DATA
    r = p.getRed()
    g = p.getGreen()
    b = p.getBlue()

    # VALUES FOR THE NEW COLOR
    newR = posterize(r)
    newG = posterize(g)
    newB = posterize(b)
    
    # MODIFY THE COLORS
    p.setRed(newR)
    p.setGreen(newG)
    p.setBlue(newB)

    # MODIFY THE IMAGE
    img.updatePixel(p)
  </input>
  </program>
  <p>Rewrite the code for posterizing an image using if and else rather than multiple ifs. Test
    that it still works correctly.</p>

  <exercise label="cspdecisionsimages_posterize3">
    <statement>

      <p>How many different colors are possible in our image after we posterize it using this
        function?</p>

      <hint>There are three color channels. How many values can they each take on?</hint>

    </statement>
    <choices>

      <choice correct="yes">
        <statement>
          <p>27</p>
        </statement>
        <feedback>
          <p>Each of the three color channels (red, green, and blue) has 3 possible values (0, 125,
            or 255). That gives us 3 raised to 3rd power, or 27, combinations.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Three values of each of red, green, and blue is more than 3.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>9</p>
        </statement>
        <feedback>
          <p>Each of the 3 color channels (red, green, and blue) has 3 possible values (0, 125, or
            255). There are more than 9 total combinations that can be made with those. </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>16,777,216 (= 256 * 256 * 256)</p>
        </statement>
        <feedback>
          <p>That's the total number of colors possible if each channel can have one of 256
            different values. But our code makes each color only have 3 possible values.</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
</section>

