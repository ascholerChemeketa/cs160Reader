<section xml:id="csp-collections-continued_iterating-parts-of-a-list">
  <title>Iterating Parts of a List</title>
  <p>Recall that the <c>range</c> function has a version that looks like: <c>range(start, end, change)</c>. It produces a sequence that begins with
    the <c>start</c> value, increases by <c>change</c> at each step, and stops when it hits <c>end</c> (but will not include the <c>end</c>
    value).</p>
  <p>We can use that to do things like iterating through every other item in a list. This program does exactly that by
    starting from 0 and using a change value of 2. This means it visits indexes 0, 2, 4&#8230;</p>

  <program xml:id="cspcollectionscontinued_rangechange1" interactive="activecode" language="python">
    <input>
numbers = [8, 9, 7, 10, 6, 10, 7, 4]

total = 0

# loop though every other index starting from 0
for i in range(0, len(numbers), 2):
    print("i is", i, "- Value at i is", numbers[i])
    total = total + numbers[i]

print("Total is", total)
        </input>
  </program>

  <exercise label="cspcollectionscontinued_rangechange2">
    <statement>

      <p>Which of these changes to the program would give you just the items at odd indexes in a list? (indexes 1, 3,
        5&#8230; which are for the values 9, 10, 10, 4 in the list above)</p>

    </statement>
    <choices>

      <choice>
        <statement>
          <p>Change the range to range(0, len(numbers), 3)</p>
        </statement>
        <feedback>
          <p>No, that would access indexes 0, 3, 6...</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>Change the range to range(1, len(numbers), 2)</p>
        </statement>
        <feedback>
          <p>Yes, just by starting at 1, then skipping 2 each time, we'd collect the odds</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Change the range to range(0, len(numbers), 1)</p>
        </statement>
        <feedback>
          <p>No, that would access indexes 1, 2, 3...</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Change the range to range(1, len(numbers), 3)</p>
        </statement>
        <feedback>
          <p>No, that would access indexes 1, 4, 7...</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
  <p>Or maybe we want to only iterate through half of the list. We can specify a range that does not start at 0 and end
    at <c>len(list_name)</c>.</p>

  <exercise label="cspcollectionscontinued_rangechange3">
    <statement>
      <p>The current code loops through just the first half of the list. It calculates half of the length of the list
        and uses that as the <c>end</c> value in the range function call. If the list length was 5, we would not want to
        call the halfway point 2.5 There is no index 2.5 in a list! So when calculating half the length we will use
        integer division (<c>//</c>) to make sure we get a whole number answer.</p>
      <p>Modify the code to loop through just the second half of the list.</p>

    </statement>
    <program xml:id="cspcollectionscontinued_rangechange3_editor" interactive="activecode" language="python">
      <input>
numbers = [1, 2, 3, 4, 5, 6, 7, 8]

listLength = len(numbers)
halfway = listLength // 2   # // is integer division

for i in range(0, halfway, 1):
    print("i is", i, "- Value at i is", numbers[i])

=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(self.getOutput().split("\n")[0], "i is 4 - Value at i is 5", "Testing first line of output")
        self.assertEqual(self.getOutput().split("\n")[3], "i is 7 - Value at i is 8", "Testing last line of output")

myTests().main()
        </input>
    </program>
  </exercise>
</section>

