<section xml:id="csp-collections-continued_shuffle-a-list">
  <title>Shuffle A List</title>
  <p>Imagine we want to program a card game. We will need the ability to simulate a deck of cards and select a hand of
    cards for the player. If we store the deck as a list: <c>["Ace", "2", "3",<ellipsis/>]</c> we can think of the start of the list as the
    <q>top</q> of the deck and the end of the list as the <q>bottom</q>. Dealing a player cards could be
    as simple as slicing the deck - make one slice that has the first 5 cards, that is the player's hand, and a second
    slice with everything else that is the leftover cards.</p>
  <p>However, we don’t always want to give the player the cards Ace-4. We need to shuffle the deck before trying
    to deal. We will explore two different algorithms for doing a shuffle before dealing cards.</p>
  <p>To reduce the complexity, we will only deal with a deck with 13 cards. However, we will write the code so that it
    could work for any size deck. A good practice when problem solving is to whenever possible, solve a smaller version
    of the problem before scaling up to tackle the full version.</p>
  <subsection xml:id="csp-collections-continued_shuffle-by-cuts">
    <title>Shuffle By Cuts</title>
    <p>Our first algorithm will be to try shuffling by doing a series of <q>cuts</q>, where we split the deck in
      half and put the <q>bottom</q> (second) half <q>on top of</q> (in front of) the <q>top</q>
      (first) half.</p>
    <p>The exercises below will guide you through writing the algorithm. In the first part, we will just make one cut
      and reassemble the deck so the <q>top</q> and <q>bottom</q> halves are reversed.</p>

    <exercise label="cspcollectionscontinued_shuffle1">
      <statement>
        <p>
          <ol>
            <li>
              <p>Make a variable called <c>cutPoint</c> and set it to a random value between 1 and the one less than the length
                of the deck.</p>
            </li>
            <li>
              <p>Print out <c>cutPoint</c>. Run your program a number of times and make sure it gives you values in the range
                1-11. You can remove the print once you see this is working.</p>
            </li>
            <li>
              <p>Once you are confident that you are picking a valid cut point, use it to make two slices: <c>top</c> which
                contains list items 0 up to (but not including) the <c>cutPoint</c> and <c>bottom</c> that contains from <c>cutPoint</c> on.</p>
            </li>
            <li>
              <p>Print out both halves. Again, run your program multiple times to make sure it works. You can remove the
                prints once you see this is working.</p>
            </li>
            <li>
              <p>Set <c>deck</c> to be <c>bottom</c> plus <c>top</c> and print what deck becomes. That should reverse the order of
                the two halves. (Doing <c>+</c> will merge two lists into one big list.)</p>
            </li>
          </ol>
        </p>
        <note>Check here for a review of <xref ref="csp-decisions-simulations_random-numbers" text="custom">random numbers</xref>.</note>
        <p>The checks for this program can’t verify it works because it is doing something random. They will just
          make sure you have some of the basic elements that are needed. Make sure to test your program until you are
          sure it is working. The checks do depend on you using the specified variable names in your code.</p>

      </statement>
      <program xml:id="cspcollectionscontinued_shuffle1_editor" interactive="activecode" language="python">
        <input>
          import random
          deck = ["Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]

          # Your code here
        </input>
        <tests>
          from unittest.gui import TestCaseGui

          class myTests(TestCaseGui):
              def testOne(self):
                  self.assertRegex(self.getEditorText(), r"random.randrange\([^,]*,[^\)]*\)", "Testing that use random.randrange")
                  self.assertRegex(self.getEditorText(), r"cutPoint.*=.*", "Testing that have cutPoint and initialize it")
                  self.assertRegex(self.getEditorText(), r"top.*=.*", 'Testing that you have a "top" variable')
                  self.assertRegex(self.getEditorText(), r"deck\[\s*0\s*:\s*cutPoint\s*\]", 'Testing that make the "top" cut correctly')
                  self.assertRegex(self.getEditorText(), r"bottom.*=.*", 'Testing that you have a "bottom" variable')
                  self.assertRegex(self.getEditorText(), r"deck\[\s*cutPoint\s*:.*\]", 'Testing that make the "bottom" cut')

          myTests().main()
        </tests>
      </program>
    </exercise>
    <p>At this point, your program should print out a deck where part of the back has been moved to the front. So
      hopefully, if we repeat that process a bunch of times, the deck will keep getting chopped up differently and
      become more and more jumbled.</p>
    <p>Let’s test that.</p>

    <exercise label="cspcollectionscontinued_shuffle2">
      <statement>
        <p>
          <ol>
            <li>
              <p>Put your existing code in a loop that repeats the whole process 10 times.</p>
            </li>
          </ol>
        </p>

      </statement>
      <program xml:id="cspcollectionscontinued_shuffle2_editor" interactive="activecode" language="python">
        <input>
          import random
          deck = ["Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]

          # Your code here
        </input>
        <tests>
          from unittest.gui import TestCaseGui

          class myTests(TestCaseGui):
              def testOne(self):
                  self.assertRegex(self.getEditorText(), r"for\s+.*\s+in\s+range", "Testing that you added a range based loop.")

          myTests().main()
        </tests>
      </program>
    </exercise>

    <exercise label="cspcollectionscontinued_shuffle3">
      <statement>

        <p>How does the method seem to work?</p>

      </statement>
      <choices>

        <choice correct="yes">
          <statement>
            <p>Poorly. New cuts seem to "fix" previous cuts and not compound on each other.</p>
          </statement>
          <feedback>
            <p>Correct. This is actually a really bad way to shuffle cards. Cutting the deck 10 times (or a million) is
              no more random than cutting it just once!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>OK. Neighbor values like 4/5 or 7/8 tend to stay next to each other, but the deck is getting more mixed
              up.</p>
          </statement>
          <feedback>
            <p>Really???</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Really well.</p>
          </statement>
          <feedback>
            <p>Really???</p>
          </feedback>
        </choice>
      </choices>

    </exercise>
  </subsection>
  <subsection xml:id="csp-collections-continued_shuffle-by-move-to-back">
    <title>Shuffle By Move To Back</title>
    <p>The second algorithm we will try will be to pick one card at random from the deck (other than the last card) and
      move it to the end of the deck. On its own that won’t do much, but maybe if we repeat it a bunch of times,
      it will work.</p>
    <p>The exercises below will guide you through writing the algorithm.</p>

    <exercise label="cspcollectionscontinued_shuffle4">
      <statement>
        <p>
          <ol>
            <li>
              <p>Make a variable called <c>selectIndex</c> and set it to a random value between 0 and 2 less than the length of the
                deck. (Since the last card is length - 1 and we do not want to select it).</p>
            </li>
            <li>
              <p>Print <c>selectIndex</c> and make sure it gives valid numbers each time you run the program.</p>
            </li>
            <li>
              <p>Copy the card at that location of <c>selectIndex</c> to a variable <c>removed</c>. Then use the <c>.pop()</c> function to
                remove that item from the <c>deck</c>. Here is the section on <xref ref="csp-collections-intro_adding-and-removing-items" text="title"/>
                if you need to review.</p>
            </li>
            <li>
              <p>Print <c>removed</c> and <c>deck</c>. Make sure the card you <q>removed</q> is no longer in the deck.</p>
            </li>
            <li>
              <p>Append the removed card to the end of the deck. Print the deck and verify that one random card was
                moved to the end.</p>
            </li>
          </ol>
        </p>
        <p>The checks for this program can’t verify it works because it is doing something random. They will just
          make sure you have some of the basic elements that are needed. Make sure to test your program until you are
          sure it is working. The checks do depend on you using the specified variable names in your code.</p>

      </statement>
      <program xml:id="cspcollectionscontinued_shuffle4_editor" interactive="activecode" language="python">
        <input>
          import random
          deck = ["Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]

          # Your code here
        </input>
        <tests>
          from unittest.gui import TestCaseGui

          class myTests(TestCaseGui):
              def testOne(self):
                  self.assertRegex(self.getEditorText(), r"random.randrange\([^,]*,[^\)]*\)", "Testing that use random.randrange")
                  self.assertRegex(self.getEditorText(), r"selectIndex.*=.*", "Testing that have selectIndex and initialize it")
                  self.assertRegex(self.getEditorText(), r"removed.*=.*", "Testing that have removed and initialize it")
                  self.assertRegex(self.getEditorText(), r"\[\s*selectIndex\s*\]", "Testing that you access item selectIndex from the deck")
                  self.assertRegex(self.getEditorText(), r"deck.pop\(\s*selectIndex\s*\)", 'Testing that you call remove on the deck and remove selectIndex')
                  self.assertRegex(self.getEditorText(), r"deck.append\(\s*removed\s*\)", 'Testing that you call append on the deck and append removed')

          myTests().main()
        </tests>
      </program>
    </exercise>
    <p>Now we will repeat the process. Since we are only moving one card at a time, doing 10 repetitions probably
      won’t be enough. But let’s start with that and see if the method looks like it is working before we
      scale it up to more repetitions.</p>

    <exercise label="cspcollectionscontinued_shuffle5">
      <statement>
        <p>
          <ol>
            <li>
              <p>Put your existing code in a loop that repeats the whole process 10 times.</p>
            </li>
          </ol>
        </p>

      </statement>
      <program xml:id="cspcollectionscontinued_shuffle5_editor" interactive="activecode" language="python">
        <input>
          import random
          deck = ["Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]

          # Your code here
        </input>
        <tests>
          from unittest.gui import TestCaseGui

          class myTests(TestCaseGui):
              def testOne(self):
                  self.assertRegex(self.getEditorText(), r"for\s+.*\s+in\s+range", "Testing that you added a range-based loop.")

          myTests().main()
        </tests>
      </program>
    </exercise>

    <exercise label="cspcollectionscontinued_shuffle6">
      <statement>

        <p>How does this new method seem to work?</p>

      </statement>
      <choices>

        <choice>
          <statement>
            <p>Poorly. Items seem to drift back to their initial positions after being moved.</p>
          </statement>
          <feedback>
            <p>Things should be more jumbled up than that.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>OK. But there are still really long runs of consecutive cards (like 2-6 all in order).</p>
          </statement>
          <feedback>
            <p>It's possible you saw this, but only if you got unlucky. Try running the program again.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Really well.</p>
          </statement>
          <feedback>
            <p>This is pretty effective, though it would help to repeat the process more than 10 times.</p>
          </feedback>
        </choice>
      </choices>

    </exercise>
    <p>If we really wanted to prove which method was the better way to shuffle we would need to create a
      measurement of randomness and then test how <q>random</q> the results of the different algorithms are. We
      might also need to do this to figure out the optimum number of repetitions for any particular algorithm. But the <q>eye
      test</q> is good enough to identify that our second algorithm is superior.</p>
  </subsection>
</section>

