<section xml:id="computer-architecture_the-processor">
        <title>The Processor</title>
        <p>This basic model of a computer as a processing unit that takes some input, communicates with a memory, and produces output, is known as the <term>von Neumann architecture</term> after the early computer scientist <xref ref="../HistoryOfComputers/Generation1#vonneumann"/>. In this architecture, the processor itself consists of multiple specialized parts:</p>
        <figure align="" xml:id=""><image source="ComputerArchitecture/Images/cpustructuremap.gif" width="50%" alt="CPU Structure"/></figure>
        <p><ul>
            <li>
                <p>The <term>arithmetic logic unit</term> (ALU) - the central processing unit that can perform mathematical and logic operations.</p>
            </li>
            <li>
                <p>The <term>control unit</term> directs the movement of instructions in and out of the processor and sends control signals to the ALU to make it perform the correct operation at any given point in time.</p>
            </li>
            <li>
                <p>The processor <term>registers</term> - small special-purpose storage areas used to store the information the ALU is working with.</p>
            </li>
            <li>
                <p>The memory unit - not part of the processor - holds both data and instructions (program). To be used, this information must be transferred to registers.</p>
            </li>
        </ul></p>
        <p>Modern computers add many layers of complexity to this basic model. One such modification seen in the picture above is multiple busses - in the diagram on the previous page and the original von Neumann architecture, there is only one system bus that can carry messages from one component to another. This means that the processor and memory would have to take turns talking: &#8220;CPU: Please send me the data at address 1 in memory&#8221;; &#8220;Memory: OK, the data at 00001 is 01010111.&#8221;; &#8220;CPU: Please send me the data at address 2 in memory&#8221;&#8230; Having multiple busses avoids this bottleneck by allowing the CPU communicate the next address it wants at the same time memory sends data back to the CPU.</p>
        
        
        <raw format="html" xml:id="computer-architecture_index-1" xml:space="preserve">            &lt;h3 class="underlined"&gt;
               The ALU
            &lt;/h3&gt;
            </raw>
        <figure align="" xml:id=""><image source="ComputerArchitecture/Images/cpustructuremap-alu.gif" width="185%" alt="ALU"/></figure>
        <p>The arithmetic logic unit is a collection of circuits that can do math and logic. Early processors could only do very simple operations - add or subtract numbers, compare two numbers to see which is larger, and do Boolean logic (to say combine two values with XOR). More complex operations, like multiplication, might have to be performed via simpler operations that the ALU can do directly. Instead of multiplying two numbers, a very simple computer would have to add them repeatedly.</p>
        <p>As components became smaller, more and more logic could be built into ALUs - from circuits to do multiplication, to circuits to work with floating-point decimals or process text. Nowadays, almost every processor has multiple ALUs that work in parallel and are often specialized for specific jobs.</p>
        <raw format="html" xml:space="preserve">
&lt;div class="attribution"&gt;Materials on this page adapted with permission from:&lt;br /&gt;
&lt;a href='http://www.eastaughs.fsnet.co.uk/'&gt;Microprocessor Tutorial&lt;/a&gt; by Matthew Eastaugh&lt;/div&gt;</raw>
    </section>

