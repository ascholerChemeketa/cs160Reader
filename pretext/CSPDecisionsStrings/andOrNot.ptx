<section xml:id="csp-decisions-strings_and-or-and-not">
        <title>And, Or, and Not</title>
        
        
        <subsection xml:id="csp-decisions-strings_and">
            <title>And</title>
            <p><c>and</c> is what we use when we want to verify that two things are BOTH true.
                A common use of <c>and</c> is to check that a value is in a range between a minimum value and a maximum
                value. For example, to determine if a grade is a &#8220;B&#8221;, we need to make sure it is at least 80 but
                is also less than 90. We can use <c>and</c> to combine <c>grade &gt;= 80</c> and <c>grade &lt; 90</c> so that
                both must be true for the overall condition to be true. Try changing grade to different values
                as you run this program:</p>

    <program xml:id="cspdecisionsstrings_andornot1" interactive="activecode" language="python">
        <input>
grade = 83
if grade &gt;= 80 and grade &lt; 90:
    print ("You got a B")
print ("All done")
        </input>
    </program>

    <exercise label="cspdecisionsstrings_andornot2">
        <statement>

            <p>Given the code below, what describes the values of x that will cause the code to print &#8220;condition true&#8221;?</p>
            <program language="python"><input>
if x &gt; 0 and x &lt; 10:
    print ("condition true")
print ("All done")
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1 to 10</p>
                </statement>
                <feedback>
                    <p>This would be true if the second expression was x &lt;= 10.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0 to 9</p>
                </statement>
                <feedback>
                    <p>This would be true if the first logical expression was x &gt;= 0.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>1 to 9</p>
                </statement>
                <feedback>
                    <p>The "condition true" will only be printed when x is greater than 0 and less than 10 so this is the range from 1 to 9.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
        <subsection xml:id="csp-decisions-strings_or">
            <title>Or</title>
            <p><c>or</c> is a way to give multiple ways to satisfy some criteria.
                For example, maybe our program is going to ask the user if they have a bag to check.
                We want them to be able to answer either &#8220;yes&#8221; or just &#8220;y&#8221;. If you input either answer when
                asked for an input by this program, it will tell you there will be an extra fee.</p>

    <program xml:id="cspdecisionsstrings_andornot3" interactive="activecode" language="python">
        <input>
answer = input("Do you have a bag to check? (yes/no)")
if answer == "yes" or answer =="y":
    print("That will be an extra fee.")
print ("All done")
        </input>
    </program>

    <exercise label="cspdecisionsstrings_andornot4">
        <statement>

            <p>Given the code below, what describes the values of x that will cause the code to print &#8220;condition true&#8221;?</p>
            <program language="python"><input>
if x &lt; 0 or x &gt;= 10:
    print ("condition true")
print ("All done")
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0 to 10</p>
                </statement>
                <feedback>
                    <p>If x was 5, but ``x &lt; 0`` and ``x &gt;= 10`` are false.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1 to 10</p>
                </statement>
                <feedback>
                    <p>If x was 5, but ``x &lt; 0`` and ``x &gt;= 10`` are false.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>negative values</p>
                </statement>
                <feedback>
                    <p>That is partially correct. But what values would be true because they made ``x &gt;= 10`` true?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>negative values or 2+ digits</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
        <subsection xml:id="csp-decisions-strings_not">
            <title>Not</title>
            <p>Finally, <c>not</c> is primarily used with functions that return a Boolean value. For instance,
                <c>isalnum</c> is a string function that checks to see if all of the characters are alphanumeric
                (letters or digits). This program wants to know the opposite of that - if there is at least
                one special symbol, it wants to make the use pick a new username. So <c>not</c>
                is used to reverse the result of <c>isalnum</c>. If the user gives input that includes a symbol,
                <c>isalnum</c> will return <c>False</c>, but the <c>not</c> will turn that into <c>True</c> which means
                that we will execute the line of code that asks them to try again.</p>

    <program xml:id="cspdecisionsstrings_andornot5" interactive="activecode" language="python">
        <input>
name = input("Please enter a username, make sure not to include special characters.")
if not name.isalnum():
    name = input("Try again, make sure not to include special characters.")

print ("Welcome", name)
        </input>
    </program>
            <p>Notice that the program currently only will ask you to try again once. If we want it to keep
                asking the user to try again until they get it right, we would need a loop. Try changing the
                <c>if</c> into a <c>while</c> - the program will keep asking you to try again until you get it right.</p>
        </subsection>
    </section>

