<section xml:id="csp-decisions-strings_when-to-use-and-and-or">
  <title>When to use And and Or</title>
  <p>The keywords <c>and</c>, <c>or</c>, and <c>not</c> give us lots of flexibility in how we express conditions. Our goal
    should always be to make our code as easy as possible to understand and to avoid repeating ourselves.</p>
  <p>One sign that you may want to use an <c>and</c> to simplify things, is if you have a nested if:</p>

  <program xml:id="cspdecisionsstrings_complexwhen1" interactive="activecode" language="python">
    <input>
x = 8
if x &lt;= 10:
    if x &gt;= 1:
        print("x is between 1 and 10")
print("Done")
        </input>
  </program>
  <p>The inner print statement will only run if <c>x &gt;= 1</c> is true. But the if statement that checks that for that is
    inside <c>if x &lt;= 10</c>. So it only runs if x is 10 or less. Thus to reach the message about <c>x</c>, it must be both 10 or
    less and 1 or more. So why not just write it like this?</p>

  <program xml:id="cspdecisionsstrings_complexwhen2" interactive="activecode" language="python">
    <input>
x = 8
if x &lt;= 10 and  x &gt;= 1:
    print("x is between 1 and 10")
print("Done")
        </input>
  </program>
  <p>Similarly, we could write the back check logic from the last page using multiple <c>if</c> statements:</p>

  <program xml:id="cspdecisionsstrings_complexwhen3" interactive="activecode" language="python">
    <input>
answer = input("Do you have a bag to check? (yes/no)")
if answer == "yes":
    print("That will be an extra fee.")
if answer =="y":
    print("That will be an extra fee.")
print ("All done")
        </input>
  </program>
  <p>But that means repeating the print statement multiple times. So the version that used <c>or</c> is better than this.</p>

  <exercise label="cspdecisionsstrings_complexwhen4">
    <statement>

      <p>What logic is equivalent to the logic shown below?</p>
      <program language="python">
        <input>
if age &gt; 12:
    if age &lt; 20:
        print("Teenager")
</input>
      </program>

    </statement>
    <choices>

      <choice correct="yes">
        <statement>
          <p>if age &gt; 12 and age &lt; 20:</p>
        </statement>
        <feedback>
          <p>Correct</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>if age &gt; 12 or age &lt; 20:</p>
        </statement>
        <feedback>
          <p>To reach the print in that sample, both if's must be True</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>if age &gt; 12 not age &lt; 20:</p>
        </statement>
        <feedback>
          <p>That does not make sense. "not" cannot combine multiple true false values</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
  <p>It is fine to chain a bunch of <c>and</c>s or <c>or</c>s together to make one large expression as shown below. This program
    accepts four different answers - because all four expressions are combined with or, only one part needs to be true
    to make the whole thing true.</p>

  <program xml:id="cspdecisionsstrings_complexwhen5" interactive="activecode" language="python">
    <input>
answer = input("Do you have a bag to check? (yes/no)")
if answer == "yes" or answer =="y" or answer == "Y" or answer == "YES":
    print("That will be an extra fee.")
print ("All done")
        </input>
  </program>
  <note>
    <p>We could simplify the example above by using the string <c>lower</c> function to turn the answer into lower case: <c>answer = answer.lower()</c>.
      Once we did that, we would not have to worry about the answer being <q>Y</q> or <q>YES</q>, we would
      know it only had lower-case letters.</p>
  </note>
  <p>We will generally stay away from more complex expressions that mix and’s and or’s, they can get
    confusing to write and read. If you feel the need to write something super complex, you can use parentheses
    to make sure that the logic is evaluated in the right order:</p>
  <program language="python">
    <input>
# True if the type is checking or savings AND the balance is over 10000
if (balance &gt; 10000) and (type == "checking" or type == "savings")
</input>
  </program>
</section>

