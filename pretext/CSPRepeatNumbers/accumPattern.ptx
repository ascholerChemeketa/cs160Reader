<section xml:id="csp-repeat-numbers_the-accumulator-pattern">
  <title>The Accumulator Pattern</title>
  <p>We have seen the two programs below before. They do very different jobs - one turns a decimal number into a binary
    one, the other lets the user enter numbers and then prints out their average. However, there is a common pattern in
    these programs - the <term>Accumulator Pattern</term>. The accumulator pattern is a common recipe for using a loop
    to combine several values and build up an answer.</p>
  <p>In the first program, we <em>accumulate</em> the different values that <c>value</c> holds into the variable <c>sum</c>:</p>
  <program language="python">
    <input>
sum = 0
count = 0
message = "Enter an integer. Enter 0 or less to stop."
value = input(message)
while int(value) &gt; 0:
    sum = sum + int(value)
    count = count + 1
    value = input(message)

print("The sum is: " + str(sum) + " the average is: " + str(sum / count))
</input>
  </program>
  <p>In the second program, we <em>accumulate</em> the different values that <c>remainder</c> holds into the variable <c>binary</c>:</p>
  <program language="python">
    <input>
number = 11
binary = ""

while number != 0:
    remainder = number % 2
    binary = str(remainder) + binary
    number = number // 2

print(binary)
</input>
  </program>
  <p>Here are the five steps in this pattern:</p>
  <p>
    <ol>
      <li>
        <p>Set the <term>accumulator variable</term> to its initial value. This is the value we want if there is no data
          to be processed. For the first loop, the <c>sum</c> is set to 0. For the second loop, <c>binary</c> is set to the empty
          string <c>""</c>. This happens before the loop.</p>
      </li>
      <li>
        <p>Use a loop to iterate through all the data. There should be a variable that on each value in the data we are
          trying to accumulate.</p>
      </li>
      <li>
        <p>Combine each <em>piece</em> of the data into the accumulator. The first program uses <c>+</c> to add each
          value to the number <c>sum</c>. The second program uses <c>+</c> to build up the string <c>binary</c>.</p>
      </li>
      <li>
        <p>Once the loop is done, do something with the result.</p>
      </li>
    </ol>
  </p>
  <p>What is the sum of all the numbers between 1 and 100? We can answer that easily using our pattern.</p>

  <program xml:id="csprepeatnumbers_accumpattern1" interactive="activecode" language="python">
    <input>
# STEP 1: INITIALIZE ACCUMULATOR
sum = 0  # Start out with nothing
# STEP 2: LOOP THROUGH THE DATA
for number in range(1,101):
    # STEP 3: ACCUMULATE
    sum = sum + number

# STEP 4: PROCESS RESULT
print(sum)
        </input>
  </program>
  <p>Step 3 does not have to use <c>+</c> to build up our answer. We could use <c>*</c> in the accumulator pattern to
    build up the value of <m>7!</m>. (<m>7!</m> means the value you get by calculating <m>7 \cdot 6 \cdot 5 \cdot 4
    \cdot 3 \cdot 2 \cdot 1</m>)</p>

  <program xml:id="csprepeatnumbers_accumpattern2" interactive="activecode" language="python">
    <input>
# STEP 1: INITIALIZE ACCUMULATOR
product = 1  # 0! is defined as 1... that is our starting point
# STEP 2: LOOP THROUGH THE DATA
for number in range(7, 0, -1):
    # STEP 3: ACCUMULATE
    product = product * number

# STEP 4: PROCESS RESULT
print(product)
        </input>
  </program>
  <p>One ingredient that is critical is that we do step 1 before the loop starts. If we try to initialize the
    accumulator in the loop we will just keep resetting it. Watch this failed attempt to add up the numbers from 1 to 5
    run line by line to see why:</p>

  <program xml:id="csprepeatnumbers_accumpattern3" interactive="codelens" language="python">
    <input>
# STEP 2: LOOP THROUGH THE DATA
for number in range(6):
    # STEP 1: INITIALIZE ACCUMULATOR???
    sum = 0
    # STEP 3: ACCUMULATE
    sum = sum + number

# STEP 4: PROCESS RESULT
print(sum)
    </input>
  </program>
  <exercise label="csprepeatnumbers_accumpattern4" numbered="yes" adaptive="yes" indentation="show" language="python">
    <statement>
      <p>The following is the correct code for printing the sum of all the odd numbers from 1 to 29 using the
        accumulator pattern, but it is mixed up. Drag the blocks from the left side and put them in the correct order and
        indentation on the right.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>sum = 0</cline>
      </block>
      <block order="5">
        <cline>numbers = range(1, 30, 2)</cline>
      </block>
      <block order="4">
        <cline>for number in numbers:</cline>
      </block>
      <block order="3">
        <cline> sum = sum + number</cline>
      </block>
      <block order="2">
        <cline>print(sum)</cline>
      </block>
    </blocks>
  </exercise>
</section>

