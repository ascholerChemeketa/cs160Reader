<section xml:id="csp-repeat-numbers_counting-with-a-while-loop">
        <title>Counting with a While Loop</title>
        <p>We can also use a <c>while</c> loop to count through values similar to a <c>for</c> loop that is
            iterating over a range. However, it does involve a little extra work on our part.</p>
        <p>A <c>for</c> loop automatically moves to the next value as we iterate through a list. This program
            will set <c>counter</c> to 1, print it, then change <c>counter</c> to 2, print that, etc&#8230; It continues
            counting until it reaches 11 (and stops the loop before printing it).</p>

<program xml:id="csprepeatnumbers_whilecount1" interactive="codelens" language="python">
    <input>
for counter in range(1,11):
    print(counter)
    </input>
</program>
        <p>In a <c>while</c> loop, there is not a known list of items we are iterating through. So the <c>while</c>
            can&#8217;t automatically go to the next value. It is up to us to advance the loop. Here is a <c>while</c>
            loop that counts from 1 to 10:</p>

<program xml:id="csprepeatnumbers_whilecount2" interactive="codelens" language="python">
    <input>
counter = 1
while counter &lt; 11:
    print(counter)
    counter = counter + 1
    </input>
</program>
        
        
        <subsection xml:id="csp-repeat-numbers_loop-control-variable index-1">
            <title>Loop Control Variable</title>
            <p>In the while loop in the program above, <c>counter</c> is known as the <term>loop control variable</term>.
                The <term>loop control variable</term> is a variable that is tested as part of the logical expression
                of the <c>while</c> (<c>counter &lt; 11</c>). A loop control variable should be initialized before The
                while (<c>counter = 1</c>), tested by the while, and then updated in the loop body.</p>
            <p>The last line in the loop: <c>counter = counter + 1</c> is the update. It is what advances us
                to the next value. Without that line, <c>counter</c> would never change. Try running this version
                of the program:</p>

<program xml:id="csprepeatnumbers_whilecount3" interactive="codelens" language="python">
    <input>
counter = 1
while counter &lt; 11:
    print(counter)
    </input>
</program>
            <p>Remember that in assignment (<c>=</c>) statements, we always do the work on the right side, and
                then store the answer into the variable on the left side. Thus in <c>counter = counter + 1</c>,
                we first do <c>counter + 1</c> which says &#8220;add one to the value we have stored in counter&#8221;. On its
                own, that would not change <c>counter</c>. To actually change counter, we need to store the answer
                back into counter, so we do <c>counter = ...</c>.</p>
            <p>We can do whatever we want to update the counter. We could count from 30 down to 0 by 5:</p>

<program xml:id="csprepeatnumbers_whilecount4" interactive="codelens" language="python">
    <input>
counter = 30
while counter &gt; 0:
    print(counter)
    counter = counter - 5
    </input>
</program>
            <p>Or we could double the counter with each iteration:</p>

<program xml:id="csprepeatnumbers_whilecount5" interactive="codelens" language="python">
    <input>
counter = 1
while counter &lt; 100:
    print(counter)
    counter = counter * 2
    </input>
</program>
            <p>Where we do the update matters. In this loop, <c>counter</c> starts at 0. We print that value,
                then add 2 to the <c>counter</c>. When we get to 6, it is printed, then we add 2. Then we go
                back to the <c>while</c>&#8217;s test. Since <c>counter &lt; 8</c> is no longer true, we end the loop. So
                we see the value 0,2,4,6 even though the counter ends up reaching 8.</p>

<program xml:id="csprepeatnumbers_whilecount6" interactive="codelens" language="python">
    <input>
counter = 0
while counter &lt; 8:
    print(counter)
    counter = counter + 2
print("Done")
    </input>
</program>
            <p>In this loop, the counter starts at 0, but we add 2 to it before we print it the first time.
                Thus the first thin printed is 2. Then, when counter gets to 6, we add 2 more to get 8 and
                then print that value before we go back up to test the <c>while</c>&#8217;s expression again.
                At that point, we realize it is time to stop. Thus this version prints out 2,4,6,8.</p>

<program xml:id="csprepeatnumbers_whilecount7" interactive="codelens" language="python">
    <input>
counter = 0
while counter &lt; 8:
    counter = counter + 2
    print(counter)
print("Done")
    </input>
</program>
            <note>
                <p>A common misconception is that a while loop will stop as soon as it&#8217;s logical expression
                    becomes false. A while loop won&#8217;t stop in the middle of the body. It is only at the
                    start of each iteration that the logical expression is evaluated to decide &#8220;should we
                    do the body again?&#8221;</p>
            </note>
<exercise label="csprepeatnumbers_whilecount8" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
            <p>The following is the correct code for printing a countdown that prints from 10 to 0, but
                it is mixed up. Drag the blocks from the left and put them in the correct order on the right.
                Don&#8217;t forget to indent blocks in the body of the loop.</p>
</statement>
<blocks><block order="1">
<cline>counter = 10</cline>
<cline>while counter &gt;= 0:</cline>
<cline>    print(counter)</cline>
<cline>    counter = counter - 1</cline>
</block></blocks></exercise><exercise label="csprepeatnumbers_whilecount9" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
            <p>The following is the correct code for printing the even numbers from 2 to 10, by 2&#8217;s <term>but it
                    also includes some extra code that you won&#8217;t need</term>. Drag the needed blocks from the left
                and put them in the correct order on the right.  Don&#8217;t forget to indent blocks in the
                body of the loop.</p>
</statement>
<blocks><block order="6">
<cline>counter = 2</cline>
</block><block order="2" correct="no">
<cline>counter = 0 </cline>
</block><block order="1">
<cline>while counter &lt;= 10:</cline>
</block><block order="5">
<cline>    print(counter)</cline>
</block><block order="4">
<cline>    counter = counter + 2</cline>
</block><block order="3" correct="no">
<cline>    counter = counter + 1 </cline>
</block></blocks></exercise>
    <exercise label="csprepeatnumbers_whilecount10">
        <statement>

            <p>What is the value of counter <term>after</term> the loop finishes executing?</p>
            <pre>counter = 0
while counter &lt; 11:
    print(counter)
    counter = counter + 1</pre>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>Counter is incremented each time the loop executes.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>The last value to be printed is 10.  But, the counter is incremented after the current value is printed.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>11</p>
                </statement>
                <feedback>
                    <p>Counter gets incremented to 11 after printing, and then the while loop tests counter, finds counter is not less than 11 and then continues after the body of the loop.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="csprepeatnumbers_whilecount11">
        <statement>

            <p>What does the following code print?</p>
            <pre>output = ""
x = -5
while x &lt; 0:
    x = x + 1
    output = output + str(x) + " "
print(output)</pre>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5 4 3 2 1</p>
                </statement>
                <feedback>
                    <p>If x starts at -5 how can the first value printed be 5?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-5 -4 -3 -2 -1</p>
                </statement>
                <feedback>
                    <p>This would be true if the print statement was before we increased x.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>-4 -3 -2 -1 0</p>
                </statement>
                <feedback>
                    <p>The value of x is incremented before it is printed so the first value printed is -4.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
    </section>

