<section xml:id="csp-name-functions_functions-calling-functions-1">
        <title>Functions Calling Functions - 1</title>
        <p>Much in the same way we can use a procedure <c>drawSquare</c> to help write code for a more
            complex procedure like <c>drawGrid</c>, we can use existing functions to help write new functions.</p>
        <p>When solving complex problems, we can use this trick to avoid repeating code and to make
            abstractions that make a program easier to read and write.</p>
        <p>Say we are starting with the coordinates of the three points of a triangle and we want to
            calculate the area of the shape. There is a formula called <em>Heron&#8217;s formula</em> that we can use
            to find the area of a triangle: <m>\sqrt{s (s - a) (s - b) (s - c)}</m> where <term>s</term> is the
            semi-perimeter (half the perimeter) and <term>a, b, c</term> are the lengths of the three sides.</p>
        <figure align="center" xml:id="id1"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">A triangle with sides labled a, b, and c.</caption><image source="CSPNameFunctions/Figures/herons_formula.png" width="50%" alt="Triangle with sides labeled a, b, c"/></figure>
        <p>That sounds too complex to do in a short amount of code. So let&#8217;s break down the problem.
            Before we can use that formula, we need to know the lengths of the three sides. We can use
            the distance formula to calculate them: <m>\sqrt{(x2-x1)^2 + (y2-y1)^2}</m>. Let&#8217;s make a
            function to do that job.</p>
        <p>When designing functions, we need to define them in terms of their inputs (parameters) and
            their outputs (what they return). Our <c>distance</c> functions will take in two x,y pairs and it
            will return the distance between them:</p>
        <program language="python"><input>
def distance(x1, y1, x2, y2):
    Do work to calculate distance.
    return distance
</input></program>
        <p>Let&#8217;s start by writing that and testing it. We will make a function <c>distance</c> that has parameters for
            the x and y of two different points.</p>

<exercise label="cspnamefunctions_functionscallingfunctions1">
    <statement>
        <p>This program has the function, and tests for <c>sideA</c> and <c>sideB</c>. Try running it. Then
            add a test for <c>sideC</c> that connects point1 and point3. Call the distance formula with the correct
            arguments and store the result into <c>sideC</c> (Hint, the correct answer is
            ~3.16, but you must actually use the distance function to calculate it.)</p>

    </statement>
    <program xml:id="cspnamefunctions_functionscallingfunctions1_editor" interactive="activecode" language="python">
        <input>
def distance(x1, y1, x2, y2):
    xDifference = x2 - x1
    yDifference = y2 - y1
    distance = math.sqrt( xDifference ** 2 + yDifference ** 2 )
    return distance

# Main program
import math
point1x = 0
point1y = 0
point2x = 6
point2y = 2
point3x = 1
point3y = 3

sideA = distance(point1x, point1y, point2x, point2y)
print(sideA)
sideB = distance(point2x, point2y, point3x, point3y)
print(sideB)
# Your test here
====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertAlmostEqual(sideC, 3.16227766, 3, "Testing that you printed the right length for sideC.")
        self.assertNotRegex(self.getEditorText(), "3\.16", "Testing that you did not hard code the answer.")

myTests().main()
        </input>
    </program>
</exercise>
    </section>

