<exercises xml:id="csp-python-data_chapter-exercises">
  <title>Chapter Exercises</title>
  <p>The problems in these exercises use a new data set. The file <c>"stocks.txt"</c> has data from the Dow Jones Industrial Average
    which tracks the average performance of a collection of large stocks. Each line of the file represents the opening
    day of trading (not always the first of the month as the market is not open every day).</p>

  <datafile filename="stocks.txt" label="stocks.txt" xml:id="csp-python-data_stocks-data-file">
    <pre source="CSP/datafiles/stocks.txt" />
  </datafile>

  <p>Each line has the values, each separated by commas: <ul>
      <li>
        Date
      </li>
      <li>
        Opening value
      </li>
      <li>
        High value for month
      </li>
      <li>
        Low value for month
      </li>
      <li>
        Close value for month
      </li>
      <li>
        Volume - number of shares traded
      </li>
    </ul>
  </p>

  <exercise label="csppythondata_exercises1">
    <statement>
      <p>Below is the start of a program to read in the <c>"stocks.txt"</c> file and run code on each line in the file.</p>
      <p>Add code to split the line into a list of values and print out the date value. (The date should be the first
        value in the list that you create with split.)</p>
      <p>Your final output should be a long list of dates and nothing else.</p>
      <p>You can&#8217;t use codelens with file reading problems, but you can use print statements to check what your
        code is doing. Feel free to use extra ones while writing your code and Then remove them or comment them out when
        everything is working.</p>
    </statement>
    <program xml:id="csppythondata_exercises1_editor" interactive="activecode" language="python">
      <input>
inFile = open("stocks.txt")
data = inFile.read().splitlines()
inFile.close()

for line in data:
    #Your code here
</input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(self.getOutput().split("\n")[0], "3-Dec-01", "Testing the first line.")
        self.assertEqual(self.getOutput().split("\n")[9], "1-Mar-01", "Testing the tenth line.")
        self.assertEqual(self.getOutput().split("\n")[66], "3-Jun-96", "Testing a mystery line.")

myTests().main()
</tests>
    </program>
  </exercise>

  <exercise label="csppythondata_exercises2">
    <statement>
      <p>Modify your program to print out the highest value the Dow Jones reached. (This should be the largest of the
        monthly high values.)</p>
      <p>Tip: When you get the high value, you will need to convert it from a string to a float to work with it as a
        decimal number. This should look like: <c>float(values[??])</c>.</p>
      <p>The final version of your program should only print out the one highest value, but you should work your way up
        to that. Start by printing out all of the monthly high values, then worry about finding the highest one.</p>
      <p>You can&#8217;t use codelens with file reading problems, but you can use print statements to check what your
        code is doing.</p>
    </statement>
    <program xml:id="csppythondata_exercises2_editor" interactive="activecode" language="python">
      <input>
inFile = open("stocks.txt")
data = inFile.read().splitlines()
inFile.close()

#Your code here
</input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(self.getOutput().strip(), "11908.5", "Testing for right answer.")
        self.assertNotIn(self.getEditorText(), "11908.5", "Testing that you did not hard code answer.")

myTests().main()
        </tests>
    </program>
  </exercise>

  <exercise label="csppythondata_exercises3">
    <statement>
      <p>Modify your program from question 1 to only print the dates from a specific year specified by a variable <c>desiredYear</c>.
        If <c>desiredYear</c> is 96, you would only print out values where the year (last part of the date value) is
        &#8220;96&#8221;.</p>
      <p>You should try changing desired year to different values to make sure your program works for any year for which
        there is data (89-01), but to pass the tests, you must set <c>desiredYear</c> to &#8220;92&#8221;.</p>
      <p>You can&#8217;t use codelens with file reading problems, but you can use print statements to check what your
        code is doing.</p>
    </statement>
    <program xml:id="csppythondata_exercises3_editor" interactive="activecode" language="python">
      <input>
inFile = open("stocks.txt")
data = inFile.read().splitlines()
inFile.close()

desiredYear = "92"

#Your code here
</input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(self.getOutput().split("\n")[0], "1-Dec-92", "Testing the first line.")
        self.assertEqual(self.getOutput().split("\n")[9], "2-Mar-92", "Testing the tenth line.")

myTests().main()
        </tests>
    </program>
  </exercise>

  <exercise label="csppythondata_exercises4">
    <statement>
      <p>Combine your solutions from problems 2 and 3 and make your program find the largest highest value from the
        records indicated by the variable <c>desiredYear</c>. I.e. if <c>desiredYear</c> is &#8220;96&#8221;, your program should only
        consider the records where the date value ends in &#8220;96&#8221;, and from those, should find the largest
        &#8220;highest value for month&#8221; seen in those records.</p>
      <p>You should try changing desired year to different values to make sure your program works for any year for which
        there is data (89-01), but to pass the tests, you must set <c>desiredYear</c> to &#8220;96&#8221;.</p>
      <p>You can&#8217;t use codelens with file reading problems, but you can use print statements to check what your
        code is doing.</p>
    </statement>
    <program xml:id="csppythondata_exercises4_editor" interactive="activecode" language="python">
      <input>
inFile = open("stocks.txt")
data = inFile.read().splitlines()
inFile.close()

desiredYear = "96"

#Your code here
</input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(self.getOutput().strip(), "6623.96", "Testing for right answer.")
        self.assertNotIn(self.getEditorText(), "6623.96", "Testing that you did not hard code answer.")

myTests().main()
        </tests>
    </program>
  </exercise>

  <exercise label="csppythondata_exercises5">
    <statement>
      <p>Turn your code from question 4 into a function so we can easily check the max value in multiple years. The
        function should be called <c>maxHighForYear</c>. It should take the <c>desiredYear</c> and the <c>data</c> as parameters and return the max
        &#8220;highest value for month&#8221; found in the records that match the desired year.</p>
      <p>The starter code has a simple test of your function followed by a more complex test that tests all the valid
        years. If you need to debug your code, it might be easier if you comment out the complex test and just run the
        simple one.</p>
      <p>You can&#8217;t use codelens with file reading problems, but you can use print statements to check what your
        code is doing.</p>
    </statement>
    <program xml:id="csppythondata_exercises5_editor" interactive="activecode" language="python">
      <input>
def maxHighForYear(desiredYear, data):
    # your code here
    # make sure to return the answer

# Main part of program
inFile = open("stocks.txt")
data = inFile.read().splitlines()
inFile.close()

# Simple test
print(maxHighForYear("95", data))

# Test all years - feel free to comment out while working on code
for yearNum in range(1989, 2002):
    yearNum = yearNum % 100     # keep just last two digits

    #Now format year into a string. Make sure to add a "0" if one digit
    if yearNum &gt; 10:
        year = str(yearNum)
    else:
        year = "0" + str(yearNum)

    yearsMax = maxHighForYear(year, data)
    print("Max value for", year, "was", yearsMax)

</input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(maxHighForYear("95", data), 5266.69, "Testing answer returned for \"95\".")
        self.assertEqual(maxHighForYear("00", data), 11908.5, "Testing answer returned for \"00\".")

myTests().main()
        </tests>
    </program>
  </exercise>

  <exercise label="csppythondata_exercises6">
    <statement>
      <p>Write the function <c>avgVolumeForYear</c>. It should take the <c>desiredYear</c> and the <c>data</c> as parameters and return the average of
        the &#8220;volume&#8221; value found in the records that match the desired year. (The &#8220;volume&#8221; is
        the last value in each record.)</p>
      <p>The starter code has a simple test of your function followed by a more complex test that tests all the valid
        years. If you need to debug your code, it might be easier if you comment out the complex test and just run the
        simple one.</p>
      <p>You can&#8217;t use codelens with file reading problems, but you can use print statements to check what your
        code is doing.</p>
    </statement>
    <program xml:id="csppythondata_exercises6_editor" interactive="activecode" language="python">
      <input>
def avgVolumeForYear(desiredYear, data):
    # your code here
    # make sure to return the answer

# Main part of program
inFile = open("stocks.txt")
data = inFile.read().splitlines()
inFile.close()

# Simple test
print(avgVolumeForYear("95", data))

# Test all years - feel free to comment out while working on code
for yearNum in range(1989, 2002):
    yearNum = yearNum % 100     # keep just last two digits

    #Now format year into a string. Make sure to add a "0" if one digit
    if yearNum &gt; 10:
        year = str(yearNum)
    else:
        year = "0" + str(yearNum)

    yearsMax = avgVolumeForYear(year, data)
    print("Max value for", year, "was", yearsMax)

</input>
      <tests>
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertAlmostEqual(avgVolumeForYear("91", data), 2964.3625, 3, "Testing answer returned for \"91\".")
        self.assertAlmostEqual(avgVolumeForYear("00", data), 10688.0425, 3, "Testing answer returned for \"00\".")

myTests().main()
        </tests>
    </program>
  </exercise>

</exercises>

