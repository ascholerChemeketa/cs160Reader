<section xml:id="csp-python-data_reading-the-data">
  <title>Reading the data</title>

  <p>The file <c>"uspoll.txt"</c> is what is known as a <term>text file</term>. A <term>text file</term> is actually binary -
    everything a computer stores is stored as binary data. But in a <term>text file</term>, all of the information is
    stored as a series of ASCII-encoded characters. Thus in the file, the number 250 would be stored as
    &#8220;250&#8221; which would be stored by the 8-bit values for &#8220;2&#8221;, &#8220;5&#8221;, and
    &#8220;0&#8221;. Because everything is stored as text, we can open <term>text files</term> in a program like Notepad
    to read or edit them.</p>
  <p>In a <term>binary file</term>, data is stored in its natural binary form. Thus the number 250 could be stored as as
    the 8-bit binary value 11111010. A <term>binary file</term> only makes sense if we know how to read it. If you see a
    256-bit chunk of 1&#8217;s and 0&#8217;s, there is no way to know just by looking at the data if it is supposed to
    be eight 32-bit values, or thirty-two 8-bit ones. And you can&#8217;t know if those 8-bit values are supposed to be
    numbers or ASCII characters.</p>
  <p>Text files tend to be more wasteful of bits and slower for a computer to process - the computer needs to turn the
    text <c>"250"</c> into the number <c>250</c> before it can compute with it. But they are easier for people to read and
    write. Thus, if we have data that people need to interact with, and the amount of information is not too great, it
    is common to store it in text format. If there is a tremendous amount of information or no need for people to
    interact with it, we are more likely to store it in binary form.</p>
  <p>In Python, we must <term>open</term> files before we can read from them or write to them and <term>close</term>
    them when we are done with them. Opening a file returns a Python object that has predefined functions and
    procedures, just like the turtle, string, or image objects we have seen before. Here are the functions and
    procedures that can be used to open and close files.</p>

    <list xml:id="csp-python-data_filemethods1a">
      <title>File Methods</title>
      <dl >
        <li>
            <title>open</title>
            <c>fileReference = open("filename")</c>
            <p>Open a file called filename and use it for reading. This will return a reference to a file object. We can
              use that reference to ask for data to be read, or to close the file.</p>
        </li>
        <li>
            <title>splitlines</title>
            <c>data = fileReference.read().splitlines()</c>
            <p>This is actually two commands, but we will always use them together like this. <c>read</c> will read in the
              entire file of data into one big string. <c>splitlines</c> takes that and splits it into a list - each item in the list
              is a string that has the text of one line from the file.</p>
        </li>
        <li>
            <title>close</title>
            <c>fileReference.close()</c>
            <p>Closes a file.</p>
        </li>
    </dl>
  </list>

  <p>Here is a sample of using those commands to open our file, read all the data into a list called <c>data</c>, and
    close the file. Once we have all the data, we can use a <c>for in</c> loop to iterate through all the lines in the file.
    Here we just print them out:</p>

  <program xml:id="csppythondata_readdata1" interactive="activecode" language="python">
    <input>
      # Open the file for reading. The reference we will use to work with it will be inFile
      inFile = open("uspoll.txt")

      # get all the lines of data
      data = inFile.read().splitlines()

      # Print out the full array of data
      print(data)
      print("-------------------------------------------")

      # close the file
      inFile.close()

      # Now process all the data by looping through the lines
      for line in data:
          print(line)
    </input>
  </program>

  <note><xref ref="csp-python-data_poll-data-file" text="custom">Click here to review the uspoll.txt data file</xref>.</note>

  <p>To do any real work with the lines of the file, we need to break up the lines into three parts. We want to
    turn <c>"Aberdeen, SD :13 :8"</c> into a list that looks like <c>["Aberdeen, SD", "13", "8"]</c>. That will make it easier to get the location - <c>values[0]</c>, or the
    PM10 value - <c>values[1]</c>, or the PM2.5 value - <c>values[2]</c>.</p>
  <p>In this version, the first thing we do with each line is to split it up at the &#8220;:&#8221; marks. The <c>split</c>
    function will turn a string into a list by splitting it at the value you give it. <c>values = line.split(":")</c> says to take the string
    called line, split it at the &#8220;:&#8221; and to call the resulting list <c>values</c>. We can then use that to get
    just the city name, the PM 10 value, or the PM2.5 value.</p>

  <exercise label="csppythondata_readdata2">
    <statement>
      <p>Currently, this program prints each city followed by its PM2.5 value. After you run it, try modifying it so it
        prints out the PM10 values instead of the PM2.5. Your output should look like this:</p>
      <pre><p>
Aberdeen, SD
 PM10: 8
Adrian, MI
 PM10: 9
...</p></pre>
      <p>Make sure not to print out extra lines. The test will assume that you have just that output.</p>
    </statement>
    <program xml:id="csppythondata_readdata2_editor" interactive="activecode" language="python">
      <input>
        # open the file for reading
        inFile = open("uspoll.txt")

        # get all the lines of data
        data = inFile.read().splitlines()

        # close the file
        inFile.close()

        # Now process all the data by looping through the lines
        for line in data:

            # create a list by splitting at the :
            values = line.split(":")

            # get the city from the list
            city = values[0]

            print(city)
            print("  PM2.5:", values[2])
      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertIn("PM10: 13", self.getOutput().split("\n")[1], "Testing that you printed the right value for Aberdeen")
                self.assertIn("PM10: 19", self.getOutput().split("\n")[21], "Testing that you printed the right value for Altoona")

        myTests().main()
      </tests>
    </program>
  </exercise>
  <exercise label="csppythondata_readdata3" numbered="yes" adaptive="yes" indentation="show" language="python">
    <statement>
      <p>The following program prints the pollution information for all cities that start with a <c>D</c>, but the code
        is mixed up. Arrange the blocks and indent them to make a working program.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>inFile = open("uspoll.txt")</cline>
      </block>
      <block order="4">
        <cline>data = inFile.read().splitlines()</cline>
        <cline>inFile.close()</cline>
      </block>
      <block order="1">
        <cline>for line in data:</cline>
      </block>
      <block order="5">
        <cline> values = line.split(":")</cline>
      </block>
      <block order="7">
        <cline> city = values[0]</cline>
      </block>
      <block order="2">
        <cline> if city[0] == "D":</cline>
      </block>
      <block order="6">
        <cline> print("City:", city)</cline>
        <cline> print("PM10:", values[1])</cline>
        <cline> print("PM2.5:", values[2])</cline>
      </block>
    </blocks>
  </exercise>
  <note>
    <p>If we were reading in a tremendously large file, reading it all at once might take up too much memory. In that
      case we would have to read it one line at a time, then discard that line before getting the next. That way, we
      would only need memory to store one line of data instead of all of them at once.</p>
    <p>In the interest of simplicity, we will stick with the &#8220;read it all at once&#8221; strategy since our files
      are relatively small.</p>
  </note>
</section>

