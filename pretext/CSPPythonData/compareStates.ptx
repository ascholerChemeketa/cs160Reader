<section xml:id="csp-python-data_comparing-states">
  <title>Comparing States</title>

  <p>We now can calculate the pollution for a particular state. To compare several states, we can run the program
    once for each state. But it would be nice to run the program just once and have it repeat the calculations for each
    state that we are concerned about.</p>

  <p>To do this, we need to be able to easily repeat the <q>find average pollution</q> logic. If we have a large
    amount of code that we want to repeat, it makes sense to turn it into a function. The function <c>getAvgPM25</c> will take in
    a <c>targetState</c> and the <c>data</c> collection. It will then do the work to calculate the average and return it. There are
    some <c>print</c> calls in the function just to show us what data is being worked on to help confirm the code is working.
    In the main part of the program, we call the function twice - once for <q>OR</q> and once for
    <q>TX</q>.</p>

  <program xml:id="csppythondata_comparestates1" interactive="activecode" language="python">
    <input>
      def getAvgPM25(targetState, data):
          print("Working on", targetState)
          total25 = 0
          count = 0

          for line in data:
              values = line.split(":")
              cityState = values[0].split(",")

              if targetState in cityState[1]:
                  print(cityState[0])
                  print(" PM2.5:", values[2])

                  # add the current PM2.5 value to the total
                  new25 = int(values[2])
                  total25 = total25 + new25

                  # increment the count
                  count = count + 1

          average = total25 / count
          return average

      # Main part of program
      inFile = open("uspoll.txt")
      data = inFile.read().splitlines()
      inFile.close()

      state = "OR"
      pollution = getAvgPM25(state, data)
      print("Average Pollution in", state, "is", pollution)

      state = "TX"
      pollution = getAvgPM25(state, data)
      print("Average Pollution in", state, "is", pollution)
    </input>
  </program>

  <note>
    <xref ref="csp-python-data_our-first-data-set-air-pollution-in-the-united-states" text="custom">Polution data file</xref>
  </note>

  <p>If we have a large list of states we want to process, it would be silly to keep copy/pasting the last three lines
    of code for different state codes. Repeating those three lines over and over is the perfect job for a loop.
    Letâ€™s write a loop that can iterate through a list of states:</p>

  <exercise label="csppythondata_comparestates2">
    <statement>
      <p>Write a loop to print out each state in <c>stateList</c> on its own line. Do not print anything other than the state
        codes.</p>

    </statement>
    <program xml:id="csppythondata_comparestates2_editor" interactive="activecode" language="python">
      <input>
        stateList = ["MD", "AK", "NJ", "AR", "WV", "MS"]

        # Your code here
      </input>
      <tests>
        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(self.getOutput().strip(), "\n".join(["MD", "AK", "NJ", "AR", "WV", "MS"]), "Testing that your output is correct")

        myTests().main()
      </tests>
    </program>
  </exercise>
  <p>Now we can use your code to help find the average pollution for a large number of different states. Add your loop
    to the main part of the program below and make sure your loop runs the two lines shown in comments (you may have to
    adjust the variable name <c>state</c> so it matches your loop). <c>stateList</c> has a list of the three richest (MD, AK, NJ) and
    poorest states (AR, WV, MS) by per capita income.</p>

  <program xml:id="csppythondata_comparestates3" interactive="activecode" language="python">
    <input>
def getAvgPM25(targetState, data):
    total25 = 0
    count = 0

    for line in data:
        values = line.split(":")
        cityState = values[0].split(",")

        if targetState in cityState[1]:
            # add the current PM2.5 value to the total
            new25 = int(values[2])
            total25 = total25 + new25

            # increment the count
            count = count + 1

    average = total25 / count
    return average

# Main part of program
inFile = open("uspoll.txt")
data = inFile.read().splitlines()
inFile.close()

stateList = ["MD", "AK", "NJ", "AR", "WV", "MS"]

# Your loop here
    # Repeat these two lines:
    #pollution = getAvgPM25(state, data)
    #print("Average Pollution in", state, "is", pollution)
        </input>
  </program>

  <exercise label="csppythondata_comparestates4">
    <statement>

      <p>What does the program reveal?</p>

    </statement>
    <choices>

      <choice correct="yes">
        <statement>
          <p>The richer states seem to be more polluted.</p>
        </statement>
        <feedback>
          <p>Correct</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The poorer states seem to be more polluted.</p>
        </statement>
        <feedback>
          <p>The poorer states are AR, WV, and MS</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>There does not seem to be a pattern to the results.</p>
        </statement>
        <feedback>
          <p>The poorer states are AR, WV, and MS</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
</section>

