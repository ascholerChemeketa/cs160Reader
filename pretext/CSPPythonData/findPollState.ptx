<section xml:id="csp-python-data_finding-the-pollution-for-a-state">
  <title>Finding the Pollution for a State</title>
  <p>To get the average for particular states, we need to be able to identify which state a record belongs to. Currently
    that is hard because the string that has the state also has the city: <c>"Pocatello,ID"</c>. We need to separate the two.
    Fortunately, we can easily use <c>split</c> to do so.</p>
  <p>We have already been using <c>split</c> to chop up the entire line of data into a list of the three values it contains -
    turning <c>"Pocatello,ID:15:9"</c> into <c>["Pocatello,ID", "15", "9"]</c>. In the same way, we can split <c>"Pocatello,ID"</c> at the &#8220;,&#8221; to turn it into a list
    like <c>["Pocatello", "ID"]</c> where the first value is the city and the second the state.</p>
  <p>Step 6 is in the sample below is where we do the key work. We grab <c>values[0]</c>, which is the city/state string, make a
    list out of it using <c>split</c>, and call that list <c>cityState</c>. We can then use <c>cityState[0]</c> to get the city name and <c>cityState[1]</c>
    to get the state.</p>
  <program xml:id="csppythondata_findpollstate1" interactive="codelens" language="python">
    <input>
      line = "Pocatello,ID:15:9"
      values = line.split(":")
      print("All the values:")
      print(values)

      cityState = values[0].split(",")

      print("City:", cityState[0])
      print("State:", cityState[1])
      print("PM10:", values[1])
      print("PM2.5:", values[2])
    </input>
  </program>

  <p>Now that we have the state isolated, we can use that to look for just records that have the state code that we
    desire. Let&#8217;s try that and look for records from Oregon. We will loop through all of the records, split the
    line up into values, split the city/state up into a list, and then test the state value against the state code
    &#8220;OR&#8221; and only print out records that have that code.</p>

  <note>
    <xref ref="csp-python-data_our-first-data-set-air-pollution-in-the-united-states" text="custom">Polution data file</xref>
  </note>

  <program xml:id="csppythondata_findpollstate2" interactive="activecode" language="python">
    <input>
      inFile = open("uspoll.txt")
      data = inFile.read().splitlines()
      inFile.close()

      # State we are looking for
      targetState = "OR"

      for line in data:
          values = line.split(":")
          # isolate city and state in cityState[0] and cityState[1]
          cityState = values[0].split(",")

          if targetState == cityState[1]:
              print(cityState[0])
              print("PM2.5:", values[2])
      </input>
  </program>
  <p>It seems to work. But if you look closely at the records it produces, there is nothing for Portland, OR. Looking at
    the data file, we can see why - Portland is listed as part of a metro area that extends into Washington, so its
    state code is listed as &#8220;OR-WA&#8221;. For this program to work correctly, we need to accept any state code
    that has &#8220;OR&#8221; anywhere in it. That is an easy fix, we just need to change the <c>==</c> operator into the <c>in</c>
    operator to see if the <c>targetState</c> is anywhere in the state code from the line we are working with. Try doing that and
    make sure Portland appears in the output.</p>
  <p>Now, we can merge our average logic into that code. We will only count records that are in the target state.</p>

  <program xml:id="csppythondata_findpollstate3" interactive="activecode" language="python">
    <input>
      inFile = open("uspoll.txt")
      data = inFile.read().splitlines()
      inFile.close()

      # initialize the variables
      targetState = "OR"
      total25 = 0
      count = 0

      for line in data:
          values = line.split(":")
          # isolate city and state in cityState[0] and cityState[1]
          cityState = values[0].split(",")

          if targetState in cityState[1]:
              # Uncomment these two lines if you want to see which data is included
              #print(cityState[0])
              #print(" PM2.5:", values[2])

              # add the current PM2.5 value to the total
              new25 = int(values[2])
              total25 = total25 + new25

              # increment the count
              count = count + 1

      # print the average
      average = total25 / count
      print("Average PM 2.5 value for " , targetState, " is ", average)
    </input>
  </program>

  <exercise label="csppythondata_findpollstate4">
    <statement>
      <p>Modify the program to calculate the average PM2.5 pollution in Texas (state code &#8220;TX&#8221;). What is the
        value? <var />
      </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*^\s*10.9\s*$\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*^\s*\d+\s*$\s*$">
          <feedback>
            <p>That is not the right value.</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Make sure to give your answer as a number</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="csppythondata_findpollstate5" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>The following program finds the highest PM10 value in a particular state. Arrange and indent the blocks so it
        works correctly.</p>
      <p>We only want to check the PM10 values for cities that are located in the target state. Make sure to do the
        state check before worrying about checking the PM10 value.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>inFile = open("uspoll.txt")</cline>
        <cline>data = inFile.read().splitlines()</cline>
        <cline>inFile.close()</cline>
      </block>
      <block order="5">
        <cline>targetState = "OR"</cline>
        <cline>maxCity = ""</cline>
        <cline>maxPM10 = 0</cline>
      </block>
      <block order="2">
        <cline>for line in data:</cline>
      </block>
      <block order="8">
        <cline> values = line.split(":")</cline>
        <cline> cityState = values[0].split(",")</cline>
      </block>
      <block order="9">
        <cline> if targetState in cityState[1]:</cline>
      </block>
      <block order="3">
        <cline> curPollution = int(values[1])</cline>
      </block>
      <block order="7">
        <cline> if curPollution &gt; maxPM10:</cline>
      </block>
      <block order="4">
        <cline> maxPM10 = curPollution</cline>
        <cline> maxCity = cityState[0]</cline>
      </block>
      <block order="6">
        <cline>print("The most polluted city is" , maxCity)</cline>
        <cline>print("With PM10 of:" , maxPM10)</cline>
      </block>
    </blocks>
  </exercise>
</section>