<section xml:id="csp-teasers_compute-with-turtles">
  <title>Compute with Turtles</title>
  <p>The idea of <q>turtle programming</q> dates back to the 1960â€™s and originated with Seymour
    Papert. He developed a robot turtle with a physical pen in it. Children would steer the robot
    around and create drawings with the pen by writing programs in a language called Logo.</p>

  <figure>
    <caption>Children playing with a Logo turtle robot that could draw with a pen</caption>
    <image source="CSPTeasers/Figures/mindstorms_turtle.jpg"
      alt="Children playing with a Logo turtle robot that can draw with a pen" width="50%" />
  </figure>

  <p>Today, we can play with virtual turtles in a fully graphical and non-robotic way. To do so, we
    will make use of another feature of Python - code libraries. A <term> library</term> is a
    collection of existing code designed to help programs perform some task. Using a library means
    we do not have to figure out how to handle all the details of a particular problem - the library
    code will take care of many of those details for us. In the case of making a virtual turtle, our
    program will need to have a way to keep track of where the turtle is, a way to move the turtle
    around, etc<ellipsis /> The <c>turtle</c> library will handle these details for us.</p>

  <p>To use a library, we need to tell Python we want to use the library with an <term>import</term>
    statement. In the program below, we start with <c>import turtle</c> to tell Python we want to make use of the <term>
    turtle</term> library. To use commands from the library, we use dot notation: we type the name
    of the library, then a dot <title_reference> .</title_reference>, then the command. The line <c>alex = turtle.Turtle()</c>
    calls the <title_reference> Turtle()</title_reference> command from the <title_reference>turtle</title_reference>
    library to make a new turtle - we name that turtle <title_reference>alex</title_reference>.</p>

  <p>The turtles that we make are <term>objects</term> that have behaviors we can access with
    dot-notation. We use these to tell the turtle <c>alex</c> to move around on the screen using
    commands like <c>alex.forward(150)</c>. As the turtle moves around it draws a line behind itself.</p>

  <p>Try clicking the Save &amp; Run button below to see what the following program does.</p>

  <program xml:id="cspteasers_computeturtles1" interactive="activecode" language="python">
    <input>
            import turtle # use the turtle library
            alex = turtle.Turtle() # create a turtle named alex
            alex.forward(150) # move forward by 150 units
            alex.left(90) # turn by 90 degrees
            alex.forward(75) # move forward by 75 units
        </input>
  </program>

  <exercise label="cspteasers_computeturtles2">
    <statement>

      <p>Which direction will alex move when the code below executes?</p>
      <pre>import turtle
alex = turtle.Turtle()
alex.forward(100)</pre>

    </statement>
    <choices>

      <choice>
        <statement>
          <p>Up</p>
        </statement>
        <feedback>
          <p>Check which way alex moved first in the example above</p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>Right</p>
        </statement>
        <feedback>
          <p>Check which way alex moved first in the example above</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Down</p>
        </statement>
        <feedback>
          <p>Check which way alex moved first in the example above</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Left</p>
        </statement>
        <feedback>
          <p>Turtles start off facing right by default</p>
        </feedback>
      </choice>
    </choices>

  </exercise>
  <p>Just by going forward, backward, left, and right, we can have a turtle draw a shape:</p>


  <exercise label="cspteasers_computeturtles3">
    <statement>
      <p>What shape will the program below draw when you click on the Run button?
      </p>
      <p><var/></p>
      <pre>import turtle    # use the turtle library
zari = turtle.Turtle()         # create a turtle named zari
zari.setheading(90)     # Point due north
zari.forward(100)       # tell zari to move forward by 100 units
zari.right(90)          # turn by 90 degrees
zari.forward(100)       # tell zari to move forward by 100 units
zari.right(90)          # turn by 90 degrees
zari.forward(100)       # tell zari to move forward by 100 units
zari.right(90)          # turn by 90 degrees
zari.forward(100)       # tell zari to move forward by 100 units
zari.right(90)          # turn by 90 degrees</pre>
    </statement>
    <setup>
      <var>
        <condition string="^\s*square|Square|SQUARE\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="">
          <feedback>
            <p>No, think of basic shapes. How many turns are made?</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>

</section>

