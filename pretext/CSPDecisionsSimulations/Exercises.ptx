<exercises xml:id="csp-decisions-simulations_chapter-exercises">
  <title>Chapter Exercises</title>
  <exercise label="cspdecisionssimulations_exercises1" numbered="yes" indentation="show" language="python">
    <statement>
      <p>The code below is supposed to roll an 8-sided die (sides numbered 1-8) 10000 times and after it is done, print
        out how many times 1 was rolled.</p>
      <p>Move the correct blocks from the left to the right and indent them properly. You will not need to use all of
        the blocks. Make sure to put <c>import random</c> first.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>import random</cline>
      </block>
      <block order="4">
        <cline>numberOfOnes = 0</cline>
      </block>
      <block order="10">
        <cline>for roll in range(10000):</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline> randValue = random.randrange(1, 9)</cline>
        </choice>
        <choice>
          <cline> randValue = random.randrange(1, 8) </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline> randValue = random.randrange(0, 8) </cline>
        </choice>
        <choice>
          <cline> randValue = random.randrange(0, 9) </cline>
        </choice>
      </block>
      <block order="2">
        <cline> if randValue == 1:</cline>
      </block>
      <block order="5">
        <cline> numberOfOnes = numberOfOnes + 1</cline>
      </block>
      <block order="7">
        <cline>print(numberOfOnes)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cspdecisionssimulations_exercises2" numbered="yes" indentation="show" language="python">
    <statement>
      <p>The code below is supposed to &#8220;flip a coin&#8221; 100 times by making a random number that is 0 (heads)
        or 1 (tails) and keep track of the longest streak of heads that we see. It will do so by first updating the <c>headsInARow</c>
        counter (like the sample from the <xref ref="simulationBuild#building-a-simulation" /> page). If the <c>headsInARow</c>
        increased (but not if it was reset to 0), we will check and see if it is bigger than <c>longestStreak</c>. If so, we will
        update the <c>longestStreak</c> to match <c>headsInARow</c>. After all 100 flips are done we will print out the <c>longestStreak</c>.</p>
      <p>Move the correct blocks from the left to the right and indent them properly. You will use all of the blocks.
        Make sure to put <c>import random</c> first.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>import random</cline>
      </block>
      <block order="8">
        <cline>headsInARow = 0</cline>
        <cline>longestStreak = 0</cline>
      </block>
      <block order="2">
        <cline>for i in range(100):</cline>
      </block>
      <block order="11">
        <cline> flip = random.randrange(0, 2)</cline>
      </block>
      <block order="3">
        <cline> if flip == 0: #got a heads</cline>
      </block>
      <block order="5">
        <cline> headsInARow = headsInARow + 1</cline>
      </block>
      <block order="4">
        <cline> if headsInARow &gt; longestStreak:</cline>
      </block>
      <block order="1">
        <cline> longestStreak = headsInARow</cline>
      </block>
      <block order="10">
        <cline> else: #got a tails</cline>
      </block>
      <block order="7">
        <cline> headsInARow = 0</cline>
      </block>
      <block order="6">
        <cline>print(longestStreak)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="cspdecisionssimulations_exercises3">
    <statement>
      <p>Using the code below, write a program that simulates rolling a pair of six-sided dice (1-6) 10000 times and
        counting up the number of times that an eight is rolled (the two dice add to 8).</p>
      <p>Make sure to generate two separate numbers between 1-6 for each roll. Then add those two numbers up and if they
        make eight, increment the <c>numEights</c> counter.</p>
      <p>If you have trouble, try reducing the range to something like 10 or 20 rolls. For each roll, print out what
        you rolled for each of the dice and the total they make.</p>
      <p><term>Warning</term> There is no autograder for this problem. It is up to you to decide if your program is
        working. For 10000 trials you should usually get an answer between 1300 and 1500. You may occasionally get a
        result outside that range if you are really unlucky or really lucky.</p>

    </statement>
    <program xml:id="cspdecisionssimulations_exercises3_editor" interactive="activecode" language="python">
      <input>
import random

numEights = 0

# While testing, you may want to change this loop to only to 10 trials
# To pass tests make sure to do 10000 trials and do not print anything inside the loop
for roll in range(10000):
    # YOUR CODE HERE
    # Make two random numbers 1-6 (optionally, print them out to make sure code works)
    # If they add to 8, add one to numEights
    # Optionally, print numEights out to see the change

# print number of eights rolled when loop is done
print("Number of eights was", numEights)
        </input>
    </program>
  </exercise>

  <exercise label="cspdecisionssimulations_exercises4">
    <statement>
      <p>A friend of yours likes a game that involves rolling dice to create their characters.</p>
      <p>Finish the program below to simulate rolling three dice (with sides 1-6) 6 different times and keeping track of
        the highest total that you saw.</p>
      <p>For example: Roll 1, 3, 5 - total is 9. The highest roll so far is now 9 Roll 4, 6, 3 - total is 13. The
        highest roll so far is now 3 Roll 2, 1, 5 - total is 8. The highest roll so far is still 13 Roll 6, 5, 5 - total
        is 16. The highest roll so far is now 16 Roll 3, 2, 5 - total is 10. The highest roll so far is still 16 Roll 4,
        4, 3 - total is 11. The highest roll so far is still 16</p>
      <p><term>Warning</term> There is no autograder for this problem. It is up to you to decide if your program is
        working.</p>

    </statement>
    <program xml:id="cspdecisionssimulations_exercises4_editor" interactive="activecode" language="python">
      <input>
import random

highestRoll = 0

for roll in range(6):
    # YOUR CODE HERE
    # Make three random numbers that are 1-6 (optionally, print them out to make sure code works)
    # Total them up
    # If the total is more than the highestRoll, change highestRoll to match the total
    # Optionally, print highestRoll to see if it looks correct

# print the highest roll when done with loop
print("highestRoll was", highestRoll)
        </input>
    </program>
  </exercise>

  <exercise label="cspdecisionssimulations_exercises5">
    <statement>
      <p>This program currently makes a pink dot that is 50 pixels across and is centered at 0, 0.</p>
      <p>Modify the program so that the size of the dot is a random value between 50 and 200 and the location it draws
        it is a random location where both x and y are random numbers between -100 and 100.</p>
      <p>The automatic tests will make sure you generate appropriate values, but it won&#8217;t necessarily verify you
        used the random numbers you make in the correct spots. You are responsible for checking that yourself!</p>
      <p>
        <xref ref="../CSPNameTurtles/turtleProcedures#turtle-reference" />
      </p>

    </statement>
    <program xml:id="cspdecisionssimulations_exercises5_editor" interactive="activecode" language="python">
      <input>
from turtle import *
import random
drew = Turtle()
drew.shape("circle")

#set starting location
drew.penup()
drew.goto(0, 0)
drew.pendown()

#set up the color and size
drew.pensize(50)
drew.color("#ffc8c8")

#draw the dot
drew.forward(0)

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertRegex(self.getEditorText(), r"random.randrange\(\s*-100,\s*10[01]\s*\)", "Testing that you make a random number between -100 and 100.")
        self.assertRegex(self.getEditorText(), r"random.randrange\(\s*50,\s*20[01]\s*\)", "Testing that you make a random number between 50 and 200.")

myTests().main()
        </input>
    </program>
  </exercise>

  <exercise label="cspdecisionssimulations_exercises6">
    <statement>
      <p>Challenge.</p>
      <p>Finish the function <c>getOddsFor</c>. It should determine the odds of rolling <c>targetNumber</c> when rolling two six-sided dice
        (1-6). It should do so by using a loop to repeat <c>TRIALS</c> number of times rolling two dice and seeing how many
        times <c>targetNumber</c> is the total of the two dice. Then return that number divided by <c>TRIALS</c>.</p>
      <p>This is very similar to exercise 3 above&#8230; Just make sure to check if the total you &#8220;roll&#8221; is
        the same as the <c>targetNumber</c> as opposed to always checking against 8.</p>
      <p>Make sure to <c>return</c> your answer from the function, don&#8217;t print it in the function!</p>

    </statement>
    <program xml:id="cspdecisionssimulations_exercises6_editor" interactive="activecode" language="python">
      <input>
import random

def getOddsFor(targetNumber):
    # matches will hold the number of times you "roll" the targetNumber
    matches = 0

    # TODO
    # 10000 times:
        # make two random numbers 1-6
        # if they add to targetNumber, increase matches by 1

    # calculate and return percent of time roll matched targetNumber
    return matches / 10000

# main program
print("Testing 8's, expect 0.13889", getOddsFor(8))
print("Testing 5's, expect 0.1111", getOddsFor(5))
print("Testing 12's, expect 0.0277", getOddsFor(12))

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertAlmostEqual(getOddsFor(8), 0.13888, 2, "Testing that you got about the right answer for 8.")
        self.assertAlmostEqual(getOddsFor(5), 0.11111, 2, "Testing that you got about the right answer for 5.")
        self.assertAlmostEqual(getOddsFor(12), 0.02777, 2, "Testing that you got about the right answer for 12.")

myTests().main()
        </input>
    </program>
  </exercise>

</exercises>

