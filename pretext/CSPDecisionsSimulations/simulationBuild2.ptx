<section xml:id="csp-decisions-simulations_building-a-simulation-2">
  <title>Building a Simulation - 2</title>
  <p>Now that we have a working function, we can focus on using the function. Look for the spot with the missing code at
    line 28. Add the needed code to complete the accumulator pattern to count up the number of times <c>result</c> ends up as <c>True</c>.
    The expected answer is around 80% - about 8 times out of 10 you should get at least 5 heads in a row if you flip a
    coin 100 times.</p>
  <p>If you run into troubles, here are some debugging tips:</p>
  <p>
    <ul>
      <li>
        <p>We know <c>checkHeadsInRow</c> works. Focus your attention on the main part of the program.</p>
      </li>
      <li>
        <p>Print the <c>result</c> you get in each repetition loop.</p>
      </li>
      <li>
        <p>Print the <c>successCounter</c> at the end of each repetition of the loop.</p>
      </li>
      <li>
        <p>Reduce repetitions to something like 10 to make it easier to see all the output. Your answer will be less
          reliable with fewer repetitions, so reset it to 10000 when you are done debugging.</p>
      </li>
    </ul>
  </p>

  <program xml:id="cspdecisionssimulations_simulationbuild21" interactive="activecode" language="python">
    <input>
import random

def checkHeadsInRow(desiredStreak):
    headsInARow = 0 #start with 0

    for i in range(100):
        flip = random.randrange(0, 2)

        if flip == 0:
            headsInARow = headsInARow + 1
        else:
            headsInARow = 0

        if headsInARow == desiredStreak:
            break

    # Make final decision
    if headsInARow &gt;= desiredStreak:
        return True
    else:
        return False

# ---------------------------------
# main part of program
repetitions = 10000
successCounter = 0
for run in range(repetitions):
    # use the function to see if we get the 5 heads in a row
    result = checkHeadsInRow(5)
    # TODO if result is True increase successCounter by 1

print("The successCounter is", successCounter)
print("As a percent, that is:")

percent = (successCounter / repetitions) * 100
print(str(percent) + "%")
        </input>
  </program>

  <exercise label="cspdecisionssimulations_simulationbuild22">
    <statement>
      <p>Change the program to check the odds of getting 6 heads in a row in 100 flips. Make sure to use 10,000
        repetitions so your answer is reliable. What answer do you get? Round it to the nearest whole number. <var />
      </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*^5[45](\.\d*)?%?$\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>Looks like you have an issue. Make sure to write the number like <c>XX</c>. It is possible to get really
              unlucky or lucky, so try running the program again and double-check the answer.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>

