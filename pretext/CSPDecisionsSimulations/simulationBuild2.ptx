<section xml:id="csp-decisions-simulations_building-a-simulation-2">
  <title>Building a Simulation - 2</title>
  <p>Now that we have a working function, we can focus on using the function. Look for the spot with
    the missing code at line 28. Add the needed code to complete the accumulator pattern to count up
    the number of times <c>result</c> ends up as <c>True</c>. The expected answer is around 80% -
    about 8 times out of 10 you should get at least 5 heads in a row if you flip a coin 100 times.</p>
  <p>If you run into troubles, here are some debugging tips:</p>
  <p>
    <ul>
      <li>
        <p>We know <c>checkHeadsInRow</c> works. Focus your attention on the main part of the
          program.</p>
      </li>
      <li>
        <p>Print the <c>result</c> you get in each repetition loop.</p>
      </li>
      <li>
        <p>Print the <c>successCounter</c> at the end of each repetition of the loop.</p>
      </li>
      <li>
        <p>Reduce repetitions to something like 10 to make it easier to see all the output. Your
          answer will be less
          reliable with fewer repetitions, so reset it to 1000 when you are done debugging.</p>
      </li>
    </ul>
  </p>

  <program xml:id="cspdecisionssimulations_simulationbuild21" interactive="activecode"
    language="python">
    <input>
      import random
      import sys
      # Let program run 100,000ms (100s)
      sys.setExecutionLimit(100000)

      def checkHeadsInRow(desiredStreak):
      headsInARow = 0 #start with 0

      for i in range(100):
      flip = random.randrange(0, 2)

      if flip == 0:
      headsInARow = headsInARow + 1
      else:
      headsInARow = 0

      if headsInARow == desiredStreak:
      break

      # Make final decision
      if headsInARow &gt;= desiredStreak:
      return True
      else:
      return False

      # ---------------------------------
      # main part of program
      repetitions = 1000
      successCounter = 0
      for run in range(repetitions):
      # use the function to see if we get the 5 heads in a row
      result = checkHeadsInRow(5)
      # TODO if result is True increase successCounter by 1

      print("The successCounter is", successCounter)
      print("As a percent, that is:")

      percent = (successCounter / repetitions) * 100
      print(str(percent) + "%")
    </input>
  </program>

  <exercise label="cspdecisionssimulations_simulationbuild22">
    <statement>
      <p>Make sure that your simulation is giving the right answer for the likelihood of getting 5
        heads in
        a row while flipping a coin 100 times. You should be getting an answer of around 80%.
      </p>
      <p>Then modify the program to check the odds of getting 6 heads in a row (instead of just 5).
        What answer do you get? Round it to the nearest whole number and enter it here: <var />
      </p>
      <p> Tip: you may want to change <c>repetitions</c> to <c>10000</c> so your answer is more
        reliable (the more repetitions you do, the more reliable the result will be.) </p>
    </statement>
    <setup>
      <var>
        <condition string="^\s*5[45](\.\d*)?%?\s*$">
          <feedback>
            <p>Correct!</p>
          </feedback>
        </condition>
        <condition string="^\s*[78]\d(\.\d*)?%?\s*$">
          <feedback>
            <p>That looks like the odds of getting 5 heads in a row. Make sure you simulate 6 heads
              in a row. (The odds should be much lower.)</p>
          </feedback>
        </condition>
        <condition string="^\s*\d?\d(\.\d*)?%?\s*$">
          <feedback>
            <p>That does not look correct. Your simulation can get very
              unlucky or lucky, and thus generate a value that is too high or too low. So try
              running the program again to double-check the answer.</p>
          </feedback>
        </condition>
        <condition string="^\s*.*\s*$">
          <feedback>
            <p>That does not look correct. Make sure to write your answer as a number like <c>XX</c>.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
</section>

