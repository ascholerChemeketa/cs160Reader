<section xml:id="csp-name-numbers_rules-for-names">
    <title>Rules for Names</title>

    <p>The name we give a variable, also called its <term>identifier</term>, is
        subject to some important rules. Some of these rules are strict - Python will not accept names that do not
        follow these rules. These rules are part of the <term>syntax</term> of Python. The syntax of a language is
        the rules for what are valid ways to write things in the language. Other rules for variable names are human
        conventions. Python will not enforce these rules, but you and other programmers reading your code may get
        confused.</p>
    <subsection xml:id="csp-name-numbers_naming-syntax">
        <title>Naming Syntax</title>
        <p>There are restrictions on what you can use as a variable name.</p>
        <p>
            <ul>
                <li>
                    <p>It must start with a letter (uppercase like <c>A</c> or lowercase like <c>a</c>) or an underscore <c>_</c></p>
                </li>
                <li>
                    <p>It can also contain digits, like <c>1</c> or <c>9</c>, just not as the first character</p>
                </li>
                <li>
                    <p>It can’t have spaces, or special symbols other than <c>_</c></p>
                </li>
                <li>
                            It can’t be a Python <term>keyword</term>. Keywords are words that have special
                                meaning in the language(see below for examples).
                </li>
                <li>
                    <p>Case matters. A variable named <c>result</c> is not the same as one named <c>Result</c>.</p>
                </li>
            </ul>
        </p>
        <p>Python has a few dozen keywords that you can’t use as variable names. Here is a list of the most common
            ones. If you ever have an error based on one of your variable names and do not know why, compare your name
            to this list to make sure you are not using a keyword as your name.</p>
        <table xml:id="python-keywords">
            <title>Python keywords</title>
            <tabular>

                <row>
                    <cell> and </cell>
                    <cell> as </cell>
                    <cell> assert </cell>
                    <cell> break </cell>
                    <cell> class </cell>
                    <cell> continue </cell>
                </row>
                <row>
                    <cell> def </cell>
                    <cell> del </cell>
                    <cell> elif </cell>
                    <cell> else </cell>
                    <cell> except </cell>
                    <cell> exec </cell>
                </row>
                <row>
                    <cell> finally </cell>
                    <cell> for </cell>
                    <cell> from </cell>
                    <cell> global </cell>
                    <cell> if </cell>
                    <cell> import </cell>
                </row>
                <row>
                    <cell> in </cell>
                    <cell> is </cell>
                    <cell> lambda </cell>
                    <cell> nonlocal </cell>
                    <cell> not </cell>
                    <cell> or </cell>
                </row>
                <row>
                    <cell> pass </cell>
                    <cell> raise </cell>
                    <cell> return </cell>
                    <cell> try </cell>
                    <cell> while </cell>
                    <cell> with </cell>
                </row>
                <row>
                    <cell> yield </cell>
                    <cell> True </cell>
                    <cell> False </cell>
                    <cell> None </cell>
                    <cell> </cell>
                    <cell> </cell>
                </row>

            </tabular>
        </table>

        <exercise label="cspnamenumbers_rulesfornames1">
            <statement>

                <p>Which of the following is <em>not</em> a legal variable name?</p>

            </statement>
            <choices>

                <choice>
                    <statement>
                        <p>_a1</p>
                    </statement>
                    <feedback>
                        <p>You can use an underscore as the first character in a variable name</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>my_name</p>
                    </statement>
                    <feedback>
                        <p>You can use an underscore between words in a variable name.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>amountOfStuff</p>
                    </statement>
                    <feedback>
                        <p>You can use both uppercase and lowercase letters in a variable name.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>BMP</p>
                    </statement>
                    <feedback>
                        <p>You can use only uppercase letters in a variable name.</p>
                    </feedback>
                </choice>

                <choice correct="yes">
                    <statement>
                        <p>1A</p>
                    </statement>
                    <feedback>
                        <p>You can't use a digit as the first letter in a variable name.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>

        <exercise label="cspnamenumbers_rulesfornames2">
            <statement>

                <p>Which of the following is <em>not</em> a legal variable name?</p>

            </statement>
            <choices>

                <choice>
                    <statement>
                        <p>_my_name</p>
                    </statement>
                    <feedback>
                        <p>This is legal, but you don't usually start a variable name with an underscore.</p>
                    </feedback>
                </choice>

                <choice correct="yes">
                    <statement>
                        <p>my name</p>
                    </statement>
                    <feedback>
                        <p>You can't have a space in a variable name.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>myname</p>
                    </statement>
                    <feedback>
                        <p>This may be hard to read, but it is legal.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>myName</p>
                    </statement>
                    <feedback>
                        <p>Since you can't have spaces in names, one way to make variable names easier to read is to use
                            camel case (uppercase the first letter of each new word).</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>my_name</p>
                    </statement>
                    <feedback>
                        <p>Since you can't have spaces in names, one way to make variable names easier to read is to use
                            an underscore between two words.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>
    </subsection>
    <subsection xml:id="csp-name-numbers_naming-convention">
        <title>Naming Convention</title>
        <p>Programmers generally choose names for their variables that are meaningful to the human readers of the
            program <mdash/> they help the programmer document, or remember, what the variable is used for. To be
            meaningful, a name must clearly describe what a piece of information is to anyone reading the code, not just
            the author of the code.</p>
        <p>Meaningful names are generally full words like <c>height</c>. Abbreviations are generally not meaningful to anyone
            other than the original author. If you are reading through code and see a variable <c>h</c>, that will likely
            not do anything to help you figure out what information it is holding. (The exception to this rule is
            representing values from a mathematical formula like <m>a^b + b^c = c^2</m> where <c>a</c> has a well-defined
            meaning.)</p>
        <p>Oftentimes, you need multiple words to meaningfully describe a variable. Say you have a program that involves
            converting a height between inches and centimeters, within that program, the name <c>height</c> might be
            confusing. Is it referring to a value in inches? centimeters?</p>
        <p>In cases like this, since you can’t have spaces in a variable name, you can either join words together
            by uppercasing the first letter of each new word like <c>heightInInches</c> (called <term>mixed-case</term> or <term>
            camel-case</term> because the capitals look like the humps of a camel) or use underscores between words like <c>height_in_inches</c>
            (called <term>snake-case</term>).</p>

        <exercise label="cspnamenumbers_rulesfornames3">
            <statement>

                <p>Say you have a variable that represents the date someone was hired. Which of these would be the most
                    appropriate name?</p>

            </statement>
            <choices>

                <choice correct="yes">
                    <statement>
                        <p>hireDate</p>
                    </statement>
                    <feedback>
                        <p>Correct! This or <code>hire_date</code> would both be reasonable choices for a name.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>_hire_date</p>
                    </statement>
                    <feedback>
                        <p><code>hire_date</code> would be reasonable. But you don't usually start a variable name with
                            an underscore.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>hire date</p>
                    </statement>
                    <feedback>
                        <p>You can't have a space in a variable name</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>date</p>
                    </statement>
                    <feedback>
                        <p><code>date</code> isn't the worst option here, but it might not be clear to other readers of
                            the code what date we are referring to. Is it a person's hire date? their birthday? today's
                            date?</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>hd</p>
                    </statement>
                    <feedback>
                        <p>An abbreviation would not be appropriate in this case. <code>hd</code> is not meaningful.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>
        <warning>
            <p>Beginners sometimes confuse <q>meaningful to the human readers</q> with <q>meaningful to the
                computer</q>. So they’ll wrongly think that because they’ve called some variable <c>average</c>
                or <c>pi</c>, it will somehow automagically calculate an average, or automagically associate the variable <c>pi</c>
                with the value 3.14159.</p>
            <p>That is not the case. The computer doesn’t attach semantic meaning to your variable names. The
                Python interpreter does not care if you call a variable <c>average</c>, <c>a</c>, <c>something</c>, or <c>sue</c> - to it,
                all of those names are equally meaningful in that they have no real meaning other than naming a value
                the programmer is working with.</p>
        </warning>

        
  <remark> Materials on this page adapted from <url
    href="https://github.com/RunestoneInteractive/fopp">Foundations of Python Programming</url> (<url
    href="https://www.gnu.org/licenses/fdl-1.3.en.html">GNU Free Document License</url>) </remark>
    </subsection>
</section>

